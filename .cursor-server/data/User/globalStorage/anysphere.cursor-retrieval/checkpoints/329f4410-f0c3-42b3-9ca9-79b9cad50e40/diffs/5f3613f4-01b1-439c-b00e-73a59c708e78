{"fsPath":"\\home\\hendo420\\soraFeed\\src\\app\\api\\post\\[postId]\\tree\\route.ts","fileUuid":"5f3613f4-01b1-439c-b00e-73a59c708e78","fileSizeBytes":3034,"numLines":86,"diffChanges":[{"originalStartLineNumberOneIndexed":1,"originalEndLineNumberExclusiveOneIndexed":1,"modifiedStartLineNumberOneIndexed":1,"modifiedEndLineNumberExclusiveOneIndexed":87,"addedLines":["import { NextRequest, NextResponse } from 'next/server';","","const SORA_BASE_URL = 'https://sora.chatgpt.com/backend/project_y';","","export async function GET(","  request: NextRequest,","  { params }: { params: { postId: string } }",") {","  try {","    const { searchParams } = new URL(request.url);","    const limit = searchParams.get('limit') || '20';","    const maxDepth = searchParams.get('max_depth') || '1';","    const { postId } = params;","","    console.log('üå≥ Fetching remix tree for post:', postId);","","    // Check if we have required environment variables","    const requiredEnvVars = [","      'AUTH_BEARER_TOKEN',","      'COOKIE_SESSION', ","      'CF_CLEARANCE',","      'USER_AGENT'","    ];","","    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);","    if (missingVars.length > 0) {","      console.error('‚ùå Missing environment variables:', missingVars);","      return NextResponse.json(","        { error: 'Missing required environment variables', missing: missingVars },","        { status: 500 }","      );","    }","","    // Build cookie string","    const cookieParts = [","      `__Secure-next-auth.session-token=${process.env.COOKIE_SESSION}`,","      `cf_clearance=${process.env.CF_CLEARANCE}`,","      `__cf_bm=${process.env.CF_BM}`,","      `oai-sc=${process.env.OAI_SC}`,","      `oai-did=${process.env.OAI_DID}`,","    ].filter(Boolean);","    ","    const cookieString = cookieParts.join('; ');","    console.log('üç™ Cookie string length:', cookieString.length);","    console.log('üîë Bearer token present:', !!process.env.AUTH_BEARER_TOKEN);","","    const url = `${SORA_BASE_URL}/post/${postId}/tree?limit=${limit}&max_depth=${maxDepth}`;","    console.log('üì° Making request to:', url);","","    const response = await fetch(url, {","      method: 'GET',","      headers: {","        'Authorization': `Bearer ${process.env.AUTH_BEARER_TOKEN}`,","        'Accept': '*/*',","        'Accept-Language': process.env.ACCEPT_LANGUAGE || 'en-US,en;q=0.9',","        'User-Agent': process.env.USER_AGENT || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',","        'Referer': 'https://sora.chatgpt.com/explore',","        'Cookie': cookieString,","      },","    });","","    console.log('üìä Response status:', response.status);","    console.log('üìä Response headers:', Object.fromEntries(response.headers.entries()));","","    if (!response.ok) {","      const errorText = await response.text();","      console.error('‚ùå API Error:', response.status, errorText.slice(0, 500));","      return NextResponse.json(","        { error: `API request failed: ${response.status}`, details: errorText.slice(0, 200) },","        { status: response.status }","      );","    }","","    const data = await response.json();","    console.log('‚úÖ Successfully fetched remix tree with', data.children?.items?.length || 0, 'remixes');","","    return NextResponse.json(data);","  } catch (error) {","    console.error('‚ùå Server error:', error);","    return NextResponse.json(","      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },","      { status: 500 }","    );","  }","}",""],"tokenizedAddedLines":[1000000,1000001,1000002,1000001,1000003,1000004,1000005,1000006,1000007,1000008,1000009,1000010,1000011,1000001,1000012,1000001,1000013,1000014,1000015,1000016,1000017,1000018,1000019,1000001,1000020,1000021,1000022,1000023,1000024,1000025,1000026,1000027,1000001,1000028,1000029,1000030,1000031,1000032,1000033,1000034,1000035,1000036,1000037,1000038,1000039,1000001,1000040,1000041,1000001,1000042,1000043,1000044,1000045,1000046,1000047,1000048,1000049,1000050,1000051,1000052,1000001,1000053,1000054,1000001,1000055,1000056,1000057,1000023,1000058,1000059,1000026,1000027,1000001,1000060,1000061,1000001,1000062,1000063,1000064,1000065,1000066,1000067,1000068,1000069,1000070,1000001]}],"gitInfo":{"noRepoFound":true},"kind":"KIND_ADDED"}