'use client';

import { useState, useEffect, useRef } from 'react';
import { flushSync } from 'react-dom';
import { motion, useMotionValue, useTransform, animate } from 'framer-motion';
import { useDrag } from '@use-gesture/react';
import { ChevronUp, ChevronDown } from 'lucide-react';
import { SoraFeedItem } from '@/types/sora';
import VideoPost from './VideoPost';

interface VideoFeedProps {
  items: SoraFeedItem[];
  onLoadMore?: () => void;
  hasMore?: boolean;
  loadingMore?: boolean;
  onAddToFavorites?: (item: SoraFeedItem) => void;
  onRemoveFromFavorites?: (postId: string) => void;
  isInFavorites?: (postId: string) => boolean;
}

export default function VideoFeed({ items, onLoadMore, hasMore, loadingMore, onAddToFavorites, onRemoveFromFavorites, isInFavorites }: VideoFeedProps) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isScrolling, setIsScrolling] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const y = useMotionValue(0);
  
  const goToNext = () => {
    if (currentIndex < items.length - 1) {
      // Animate to next position then change index
      const targetY = -window.innerHeight;
      animate(y, targetY, {
        type: 'spring',
        stiffness: 400,
        damping: 40,
        onComplete: () => {
          setCurrentIndex(currentIndex + 1);
          
          // Load more when approaching the end
          if (currentIndex >= items.length - 3 && hasMore && !loadingMore && onLoadMore) {
            onLoadMore();
          }
        }
      });
    }
  };

  const goToPrevious = () => {
    if (currentIndex > 0) {
      // Animate to previous position then change index
      const targetY = window.innerHeight;
      animate(y, targetY, {
        type: 'spring',
        stiffness: 400,
        damping: 40,
        onComplete: () => {
          setCurrentIndex(currentIndex - 1);
        }
      });
    }
  };

  // Drag handler
  const bind = useDrag(
    ({ down, movement: [, my], velocity: [, vy], direction: [, dy], cancel }) => {
      // Prevent dragging beyond bounds
      if (currentIndex === 0 && my > 0) {
        y.set(my * 0.2); // Rubber band effect at top
        return;
      }
      if (currentIndex === items.length - 1 && my < 0) {
        y.set(my * 0.2); // Rubber band effect at bottom
        return;
      }

      if (down) {
        // While dragging, update position
        y.set(my);
      } else {
        // Released - determine if we should snap to next/previous
        const threshold = window.innerHeight * 0.2; // 20% of screen height
        const shouldNavigate = Math.abs(my) > threshold || Math.abs(vy) > 0.5;

        if (shouldNavigate) {
          if (my < 0 && currentIndex < items.length - 1) {
            // Swiped up - animate to next position then change index
            const targetY = -window.innerHeight;
            animate(y, targetY, {
              type: 'spring',
              stiffness: 400,
              damping: 40,
              onComplete: () => {
                goToNext();
              }
            });
          } else if (my > 0 && currentIndex > 0) {
            // Swiped down - animate to previous position then change index
            const targetY = window.innerHeight;
            animate(y, targetY, {
              type: 'spring',
              stiffness: 400,
              damping: 40,
              onComplete: () => {
                goToPrevious();
              }
            });
          } else {
            // Snap back to position if can't navigate
            animate(y, 0, {
              type: 'spring',
              stiffness: 300,
              damping: 30,
            });
          }
        } else {
          // Snap back to position
          animate(y, 0, {
            type: 'spring',
            stiffness: 300,
            damping: 30,
          });
        }
      }
    },
    {
      axis: 'y',
      filterTaps: true,
      pointer: { touch: true },
    }
  );

  const handleWheel = (e: WheelEvent) => {
    e.preventDefault();
    if (isScrolling) return;
    
    setIsScrolling(true);
    
    if (e.deltaY > 0) {
      goToNext();
    } else {
      goToPrevious();
    }
    
    setTimeout(() => setIsScrolling(false), 500); // Increased timeout for animation
  };

  const handleKeyDown = (e: KeyboardEvent) => {
    if (isScrolling) return;
    
    if (e.key === 'ArrowDown' || e.key === ' ') {
      e.preventDefault();
      setIsScrolling(true);
      goToNext();
      setTimeout(() => setIsScrolling(false), 500); // Increased timeout for animation
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      setIsScrolling(true);
      goToPrevious();
      setTimeout(() => setIsScrolling(false), 500); // Increased timeout for animation
    }
  };

  // Reset y position when index changes
  useEffect(() => {
    y.set(0);
  }, [currentIndex]);

  useEffect(() => {
    const container = containerRef.current;
    if (!container) return;

    container.addEventListener('wheel', handleWheel, { passive: false });
    window.addEventListener('keydown', handleKeyDown);

    return () => {
      container.removeEventListener('wheel', handleWheel);
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [currentIndex, isScrolling]);

  return (
    <div 
      ref={containerRef}
      className="relative w-full h-screen overflow-hidden bg-black"
      tabIndex={0}
    >
      {/* Draggable container with all videos */}
      <motion.div
        {...bind()}
        style={{ y }}
        className="absolute inset-0"
      >
        {/* Previous Video */}
        {currentIndex > 0 && (
          <div 
            className="absolute inset-0 w-full h-screen"
            style={{ transform: 'translateY(-100%)' }}
          >
            <VideoPost 
              item={items[currentIndex - 1]} 
              isActive={false}
              onNext={goToNext}
              onPrevious={goToPrevious}
              onAddToFavorites={onAddToFavorites}
              onRemoveFromFavorites={onRemoveFromFavorites}
              isInFavorites={isInFavorites}
            />
          </div>
        )}
        
        {/* Current Video */}
        <div className="absolute inset-0 w-full h-screen">
          <VideoPost 
            item={items[currentIndex]} 
            isActive={true}
            onNext={goToNext}
            onPrevious={goToPrevious}
            onAddToFavorites={onAddToFavorites}
            onRemoveFromFavorites={onRemoveFromFavorites}
            isInFavorites={isInFavorites}
          />
        </div>

        {/* Next Video */}
        {currentIndex < items.length - 1 && (
          <div 
            className="absolute inset-0 w-full h-screen"
            style={{ transform: 'translateY(100%)' }}
          >
            <VideoPost 
              item={items[currentIndex + 1]} 
              isActive={false}
              onNext={goToNext}
              onPrevious={goToPrevious}
              onAddToFavorites={onAddToFavorites}
              onRemoveFromFavorites={onRemoveFromFavorites}
              isInFavorites={isInFavorites}
            />
          </div>
        )}
      </motion.div>

      {/* Navigation Arrows - Top and Bottom */}
      {/* Up Arrow - Top of Screen */}
      <button
        onClick={goToPrevious}
        disabled={currentIndex === 0}
        className="absolute top-6 left-1/2 transform -translate-x-1/2 z-50 p-4 rounded-full bg-black/30 backdrop-blur-sm text-white hover:bg-black/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all pointer-events-auto"
      >
        <ChevronUp size={28} />
      </button>
      
      {/* Down Arrow - Bottom of Screen */}
      <button
        onClick={goToNext}
        disabled={currentIndex === items.length - 1}
        className="absolute bottom-20 left-1/2 transform -translate-x-1/2 z-50 p-4 rounded-full bg-black/30 backdrop-blur-sm text-white hover:bg-black/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all pointer-events-auto"
      >
        <ChevronDown size={28} />
      </button>

      {/* Progress Indicator */}
      <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex flex-col gap-1 z-50 pointer-events-none">
        {items.map((_, index) => (
          <div
            key={index}
            className={`w-1 h-8 rounded-full transition-all duration-300 ${
              index === currentIndex ? 'bg-white' : 'bg-white/30'
            }`}
          />
        ))}
      </div>

      {/* Loading More Indicator */}
      {loadingMore && (
        <div className="absolute bottom-20 left-1/2 transform -translate-x-1/2 z-50 pointer-events-none">
          <div className="flex items-center gap-2 bg-black/50 rounded-full px-4 py-2 backdrop-blur-sm">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
            <span className="text-white text-sm">Loading more...</span>
          </div>
        </div>
      )}

      {/* Swipe Hint - Mobile */}
      <div className="md:hidden absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white/70 text-sm z-50 pointer-events-none">
        Swipe up/down to navigate
      </div>
    </div>
  );
}
