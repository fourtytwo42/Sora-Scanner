'use client';

import { useState, useRef, useEffect, useCallback } from 'react';
import { motion, useMotionValue, animate } from 'framer-motion';
import { useDrag } from '@use-gesture/react';
import { Play, Pause, Volume2, VolumeX, Heart, Share, User, CheckCircle, ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react';
import { SoraFeedItem } from '@/types/sora';
import { fetchRemixFeed } from '@/lib/api';

interface VideoPostProps {
  item: SoraFeedItem;
  isActive: boolean;
  onNext: () => void;
  onPrevious: () => void;
  onAddToFavorites?: (item: SoraFeedItem) => void;
  onRemoveFromFavorites?: (postId: string) => void;
  isInFavorites?: (postId: string) => boolean;
  onRemixStatusChange?: (hasRemixes: boolean) => void;
  onKeyboardNavigation?: (direction: 'left' | 'right') => void;
  preloadedRemixFeed?: SoraFeedItem[];
}

export default function VideoPost({ item, isActive, onNext, onPrevious, onAddToFavorites, onRemoveFromFavorites, isInFavorites, onRemixStatusChange, onKeyboardNavigation, preloadedRemixFeed }: VideoPostProps) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMuted, setIsMuted] = useState(false); // Start unmuted
  const [isLiked, setIsLiked] = useState(false);
  const [showControls, setShowControls] = useState(false);
  const [isHovering, setIsHovering] = useState(false);
  const [remixFeed, setRemixFeed] = useState<SoraFeedItem[]>([]);
  const [currentRemixIndex, setCurrentRemixIndex] = useState(0);
  const [loadingRemixes, setLoadingRemixes] = useState(false);
  const [isWheelScrolling, setIsWheelScrolling] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const x = useMotionValue(0);
  const controlsTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Get current item (original post or remix)
  const getCurrentItem = (): SoraFeedItem => {
    if (currentRemixIndex === 0 || !remixFeed.length) {
      return item; // Original post
    }
    return remixFeed[currentRemixIndex - 1]; // Video remix (index - 1 because 0 is original)
  };

  const currentItem = getCurrentItem();
  const currentVideoUrl = currentItem.post.attachments[0]?.encodings?.md?.path || 
                          currentItem.post.attachments[0]?.encodings?.source?.path;
  
  // All items from remix feed should be actual video remixes
  const hasRemixes = remixFeed.length > 0;
  const canGoLeft = currentRemixIndex > 0;
  const canGoRight = currentRemixIndex < remixFeed.length;

  // Update isLiked based on favorites when item changes
  useEffect(() => {
    if (isInFavorites) {
      setIsLiked(isInFavorites(getCurrentItem().post.id));
    }
  }, [item, currentRemixIndex, remixFeed, isInFavorites]);

  // Reset x position when remix index changes
  useEffect(() => {
    x.set(0);
  }, [currentRemixIndex]);

  // Reset remix state when video item changes
  useEffect(() => {
    setRemixFeed([]);
    setCurrentRemixIndex(0);
    setLoadingRemixes(false);
    x.set(0);
  }, [item.post.id]);

  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    if (isActive) {
      video.play().then(() => {
        setIsPlaying(true);
      }).catch(() => {
        setIsPlaying(false);
      });
    } else {
      video.pause();
      setIsPlaying(false);
    }
  }, [isActive]);

  // Load remix feed when video becomes active and we don't have remixes yet
  useEffect(() => {
    if (isActive && remixFeed.length === 0 && !loadingRemixes) {
      // Use preloaded data if available, otherwise fetch
      if (preloadedRemixFeed && preloadedRemixFeed.length > 0) {
        setRemixFeed(preloadedRemixFeed);
      } else {
        loadRemixFeed();
      }
    }
  }, [isActive, item.post.id, preloadedRemixFeed]);

  // Notify parent when remix status changes
  useEffect(() => {
    if (onRemixStatusChange) {
      onRemixStatusChange(hasRemixes);
    }
  }, [hasRemixes, onRemixStatusChange]);

  // Handle keyboard navigation for remixes
  useEffect(() => {
    if (!onKeyboardNavigation || !isActive) return;

    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'ArrowLeft' && hasRemixes && canGoLeft) {
        e.preventDefault();
        goToPreviousRemix();
      } else if (e.key === 'ArrowRight' && hasRemixes && canGoRight) {
        e.preventDefault();
        goToNextRemix();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isActive, hasRemixes, canGoLeft, canGoRight, onKeyboardNavigation]);

  // Handle video changes when switching remixes
  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    if (isActive && isPlaying) {
      video.play().catch(() => {
        setIsPlaying(false);
      });
    }
  }, [currentRemixIndex, currentVideoUrl]);

  const loadRemixFeed = async () => {
    try {
      setLoadingRemixes(true);
      console.log('🔄 Loading remix feed for post:', item.post.id);
      const feed = await fetchRemixFeed(item.post.id, 10);
      setRemixFeed(feed.items || []);
      console.log('✅ Loaded remix feed with', feed.items?.length || 0, 'video remixes');
    } catch (error) {
      console.error('❌ Failed to load remix feed:', error);
    } finally {
      setLoadingRemixes(false);
    }
  };

  const togglePlayPause = () => {
    const video = videoRef.current;
    if (!video) return;

    if (isPlaying) {
      video.pause();
      setIsPlaying(false);
    } else {
      video.play().then(() => {
        setIsPlaying(true);
      }).catch(() => {
        setIsPlaying(false);
      });
    }
  };

  const toggleMute = () => {
    const video = videoRef.current;
    if (!video) return;

    video.muted = !video.muted;
    setIsMuted(video.muted);
  };

  const handleVideoEnd = () => {
    setIsPlaying(false);
    // Auto-scroll to next video when current video ends
    if (isActive) {
      setTimeout(() => {
        onNext();
      }, 500); // Small delay before auto-advancing
    }
  };

  const goToPreviousRemix = () => {
    if (currentRemixIndex > 0) {
      // Animate to previous position then change index
      const targetX = window.innerWidth;
      animate(x, targetX, {
        type: 'spring',
        stiffness: 400,
        damping: 40,
        onComplete: () => {
          setCurrentRemixIndex(currentRemixIndex - 1);
          // Auto-play the new remix video
          setTimeout(() => {
            const video = videoRef.current;
            if (video && isActive) {
              video.play().catch(() => {
                setIsPlaying(false);
              });
            }
          }, 100);
        }
      });
    }
  };

  const goToNextRemix = () => {
    const maxIndex = remixFeed.length;
    if (currentRemixIndex < maxIndex) {
      // Animate to next position then change index
      const targetX = -window.innerWidth;
      animate(x, targetX, {
        type: 'spring',
        stiffness: 400,
        damping: 40,
        onComplete: () => {
          setCurrentRemixIndex(currentRemixIndex + 1);
          // Auto-play the new remix video
          setTimeout(() => {
            const video = videoRef.current;
            if (video && isActive) {
              video.play().catch(() => {
                setIsPlaying(false);
              });
            }
          }, 100);
        }
      });
    }
  };

  const goToRemixIndex = (index: number) => {
    const maxIndex = remixFeed.length;
    if (index >= 0 && index <= maxIndex && index !== currentRemixIndex) {
      // Determine animation direction based on target index
      const direction = index > currentRemixIndex ? -1 : 1;
      const targetX = direction * window.innerWidth;
      
      animate(x, targetX, {
        type: 'spring',
        stiffness: 400,
        damping: 40,
        onComplete: () => {
          setCurrentRemixIndex(index);
          // Auto-play the new remix video
          setTimeout(() => {
            const video = videoRef.current;
            if (video && isActive) {
              video.play().catch(() => {
                setIsPlaying(false);
              });
            }
          }, 100);
        }
      });
    }
  };

  // Use-gesture drag handler for horizontal remix navigation only
  const bind = useDrag(
    ({ down, movement: [mx, my], velocity: [vx], cancel }) => {
      // Only handle horizontal drags when there are remixes
      if (!hasRemixes) return;

      // If the drag is more vertical than horizontal, cancel and let parent handle
      if (Math.abs(my) > Math.abs(mx) && Math.abs(my) > 10) {
        cancel();
        x.set(0);
        return;
      }

      if (!down) {
        // Released - snap to next/previous or back
        const threshold = window.innerWidth * 0.2;
        const shouldNavigate = Math.abs(mx) > threshold || Math.abs(vx) > 0.5;

        if (shouldNavigate) {
          if (mx < 0 && canGoRight) {
            // Swiped left - animate to next position then change index
            const targetX = -window.innerWidth;
            animate(x, targetX, {
              type: 'spring',
              stiffness: 400,
              damping: 40,
              onComplete: () => {
                goToNextRemix();
              }
            });
          } else if (mx > 0 && canGoLeft) {
            // Swiped right - animate to previous position then change index
            const targetX = window.innerWidth;
            animate(x, targetX, {
              type: 'spring',
              stiffness: 400,
              damping: 40,
              onComplete: () => {
                goToPreviousRemix();
              }
            });
          } else {
            // Snap back to position if can't navigate
            animate(x, 0, {
              type: 'spring',
              stiffness: 300,
              damping: 30,
            });
          }
        } else {
          // Snap back to position
          animate(x, 0, {
            type: 'spring',
            stiffness: 300,
            damping: 30,
          });
        }
      } else {
        // While dragging - update x position
        if (currentRemixIndex === 0 && mx > 0) {
          x.set(mx * 0.2); // Rubber band at start
        } else if (currentRemixIndex === remixFeed.length && mx < 0) {
          x.set(mx * 0.2); // Rubber band at end
        } else {
          x.set(mx);
        }
      }
    },
    {
      filterTaps: true,
      pointer: { touch: true },
    }
  );

  // Mouse wheel events - only handle horizontal scrolling for remixes
  const handleWheel = (e: React.WheelEvent) => {
    // Throttle wheel events to prevent rapid firing
    if (isWheelScrolling) return;
    
    // Check if it's horizontal scroll (shift+wheel or horizontal wheel)
    if (e.shiftKey || Math.abs(e.deltaX) > Math.abs(e.deltaY)) {
      e.preventDefault(); // Only prevent default for horizontal scrolls
      
      // Horizontal scroll - remix navigation
      if (hasRemixes) {
        setIsWheelScrolling(true);
        
        if (e.deltaX > 0 || (e.shiftKey && e.deltaY > 0)) {
          // Scroll right - next remix
          if (canGoRight) {
            goToNextRemix();
          }
        } else if (e.deltaX < 0 || (e.shiftKey && e.deltaY < 0)) {
          // Scroll left - previous remix
          if (canGoLeft) {
            goToPreviousRemix();
          }
        }
        
        // Reset throttle after animation completes
        setTimeout(() => setIsWheelScrolling(false), 500);
      }
    }
    // Vertical scroll is handled by VideoFeed component
  };

  const formatCount = (count: number): string => {
    if (count >= 1000000) {
      return (count / 1000000).toFixed(1) + 'M';
    } else if (count >= 1000) {
      return (count / 1000).toFixed(1) + 'K';
    }
    return count.toString();
  };

  const formatTimeAgo = (timestamp: number): string => {
    const now = Date.now() / 1000;
    const diff = now - timestamp;
    
    if (diff < 60) return 'now';
    if (diff < 3600) return `${Math.floor(diff / 60)}m`;
    if (diff < 86400) return `${Math.floor(diff / 3600)}h`;
    return `${Math.floor(diff / 86400)}d`;
  };

  // Handle controls auto-hide
  const hideControlsAfterDelay = useCallback(() => {
    if (controlsTimeoutRef.current) {
      clearTimeout(controlsTimeoutRef.current);
    }
    
    // Only auto-hide if not hovering and video is playing
    if (!isHovering && isPlaying) {
      controlsTimeoutRef.current = setTimeout(() => {
        setShowControls(false);
      }, 3000);
    }
  }, [isHovering, isPlaying]);

  // Show controls and set up auto-hide
  const handleShowControls = useCallback(() => {
    setShowControls(true);
    hideControlsAfterDelay();
  }, [hideControlsAfterDelay]);

  // Handle mouse enter
  const handleMouseEnter = useCallback(() => {
    setIsHovering(true);
    setShowControls(true);
    if (controlsTimeoutRef.current) {
      clearTimeout(controlsTimeoutRef.current);
    }
  }, []);

  // Handle mouse leave
  const handleMouseLeave = useCallback(() => {
    setIsHovering(false);
    hideControlsAfterDelay();
  }, [hideControlsAfterDelay]);

  // Handle click - toggle controls and pause
  const handleVideoClick = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    
    const video = videoRef.current;
    if (!video) return;

    if (isPlaying) {
      video.pause();
      setIsPlaying(false);
    } else {
      video.play().then(() => {
        setIsPlaying(true);
      }).catch(() => {
        setIsPlaying(false);
      });
    }
    
    setShowControls(true);
    if (controlsTimeoutRef.current) {
      clearTimeout(controlsTimeoutRef.current);
    }
  }, [isPlaying]);

  // Effect to handle control visibility based on play state
  useEffect(() => {
    if (showControls) {
      hideControlsAfterDelay();
    }
    return () => {
      if (controlsTimeoutRef.current) {
        clearTimeout(controlsTimeoutRef.current);
      }
    };
  }, [isPlaying, showControls, hideControlsAfterDelay]);

    return (
      <div className="relative w-full h-full overflow-hidden bg-black">
        {/* Draggable container with all remixes */}
        <motion.div
          {...bind()}
          style={{ x }}
          className="absolute inset-0 flex items-center justify-center group cursor-pointer select-none"
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
          onClick={handleVideoClick}
          onWheel={handleWheel}
        >
          {/* Previous Remix */}
          {hasRemixes && canGoLeft && (
            <div 
              className="absolute inset-0 w-full h-screen flex items-center justify-center"
              style={{ transform: 'translateX(-100%)' }}
            >
              <video
                src={remixFeed[currentRemixIndex - 2]?.post.attachments[0]?.encodings?.md?.path || 
                     remixFeed[currentRemixIndex - 2]?.post.attachments[0]?.encodings?.source?.path}
                className="h-screen w-auto max-w-full object-contain"
                loop
                muted
                playsInline
                preload="metadata"
                poster={remixFeed[currentRemixIndex - 2]?.post.attachments[0]?.encodings?.thumbnail?.path}
              />
            </div>
          )}
          
          {/* Current Video/Remix with Controls */}
          <div className="absolute inset-0 w-full h-screen flex items-center justify-center">
            <div className="relative h-screen flex items-center justify-center">
              <video
                ref={videoRef}
                src={currentVideoUrl}
                className="h-screen w-auto max-w-full object-contain block"
                loop
                muted={isMuted}
                playsInline
                onEnded={handleVideoEnd}
                poster={currentItem.post.attachments[0]?.encodings?.thumbnail?.path}
                key={currentItem.post.id}
              >
                {currentVideoUrl && <source src={currentVideoUrl} type="video/mp4" />}
              </video>

              {/* Play/Pause Overlay - Center of video */}
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ 
                  opacity: (!isPlaying && showControls) ? 1 : 0, 
                  scale: (!isPlaying && showControls) ? 1 : 0.8 
                }}
                className="absolute inset-0 flex items-center justify-center pointer-events-none z-30"
              >
                <div className="p-4 rounded-full bg-black/50 backdrop-blur-sm">
                  <Play size={48} className="text-white ml-1" />
                </div>
              </motion.div>

              {/* Horizontal Navigation - Left Arrow */}
              {hasRemixes && (
                <motion.button
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ 
                    opacity: showControls && canGoLeft ? 1 : 0,
                    x: showControls && canGoLeft ? 0 : -20
                  }}
                  transition={{ duration: 0.2 }}
                  onClick={(e) => {
                    e.stopPropagation();
                    goToPreviousRemix();
                  }}
                  disabled={!canGoLeft}
                  className="absolute left-4 top-1/2 transform -translate-y-1/2 z-40 p-3 rounded-full bg-black/50 backdrop-blur-sm text-white transition-all hover:bg-black/70"
                  style={{ pointerEvents: showControls && canGoLeft ? 'auto' : 'none' }}
                >
                  <ChevronLeft size={24} />
                </motion.button>
              )}

              {/* Horizontal Navigation - Right Arrow */}
              {hasRemixes && (
                <motion.button
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ 
                    opacity: showControls && canGoRight ? 1 : 0,
                    x: showControls && canGoRight ? 0 : 20
                  }}
                  transition={{ duration: 0.2 }}
                  onClick={(e) => {
                    e.stopPropagation();
                    goToNextRemix();
                  }}
                  disabled={!canGoRight}
                  className="absolute right-4 top-1/2 transform -translate-y-1/2 z-40 p-3 rounded-full bg-black/50 backdrop-blur-sm text-white transition-all hover:bg-black/70"
                  style={{ pointerEvents: showControls && canGoRight ? 'auto' : 'none' }}
                >
                  <ChevronRight size={24} />
                </motion.button>
              )}

              {/* Video Info Overlay - Bottom Left */}
              <motion.div 
                initial={{ opacity: 0, y: 20 }}
                animate={{ 
                  opacity: showControls ? 1 : 0,
                  y: showControls ? 0 : 20
                }}
                transition={{ duration: 0.3 }}
                className="absolute bottom-4 left-4 right-24 z-40"
                style={{ pointerEvents: showControls ? 'auto' : 'none' }}
              >
                <div className="bg-gradient-to-t from-black/70 to-transparent rounded-xl p-3 backdrop-blur-sm">
                  {/* User Info */}
                  <div className="flex items-center gap-2 mb-2">
                    <div className="w-8 h-8 rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center flex-shrink-0">
                      <User size={16} className="text-white" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-1.5">
                        <span className="text-white font-semibold text-xs truncate">
                          {currentItem.profile.display_name || currentItem.profile.username}
                        </span>
                        {currentItem.profile.verified && (
                          <CheckCircle size={12} className="text-blue-500 flex-shrink-0" />
                        )}
                        <span className="text-white/70 text-xs flex-shrink-0">
                          {formatTimeAgo(currentItem.post.posted_at)}
                        </span>
                      </div>
                      <div className="text-white/60 text-xs">
                        {formatCount(currentItem.profile.follower_count)} followers
                      </div>
                    </div>
                  </div>

                  {/* Caption */}
                  {currentItem.post.text && (
                    <p className="text-white text-xs line-clamp-2">
                      {currentItem.post.text}
                    </p>
                  )}
                </div>
              </motion.div>

              {/* Action Buttons Overlay - Right Side */}
              <motion.div 
                initial={{ opacity: 0, x: 20 }}
                animate={{ 
                  opacity: showControls ? 1 : 0,
                  x: showControls ? 0 : 20
                }}
                transition={{ duration: 0.3 }}
                className="absolute bottom-4 right-4 flex flex-col gap-2.5 z-40"
                style={{ pointerEvents: showControls ? 'auto' : 'none' }}
              >
                {/* Like/Favorite Button */}
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    const currentItem = getCurrentItem();
                    if (isLiked) {
                      if (onRemoveFromFavorites) {
                        onRemoveFromFavorites(currentItem.post.id);
                      }
                      setIsLiked(false);
                    } else {
                      if (onAddToFavorites) {
                        onAddToFavorites(currentItem);
                      }
                      setIsLiked(true);
                    }
                  }}
                  className={`p-2.5 rounded-full backdrop-blur-sm transition-all ${
                    isLiked ? 'bg-red-500 text-white' : 'bg-black/50 text-white hover:bg-black/70'
                  }`}
                >
                  <Heart size={20} fill={isLiked ? 'currentColor' : 'none'} />
                </button>

                {/* Share Button */}
                <button 
                  onClick={(e) => e.stopPropagation()}
                  className="p-2.5 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-black/70 transition-all"
                >
                  <Share size={20} />
                </button>

                {/* Mute Button */}
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    toggleMute();
                  }}
                  className="p-2.5 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-black/70 transition-all"
                >
                  {isMuted ? <VolumeX size={20} /> : <Volume2 size={20} />}
                </button>

                {/* Remix Count Indicator */}
                {hasRemixes && (
                  <div className="flex flex-col items-center">
                    <button className="p-2.5 rounded-full bg-black/50 backdrop-blur-sm text-white hover:bg-black/70 transition-all">
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 19 18" className="h-5 w-5">
                        <circle cx="9" cy="9" r="6.75" stroke="currentColor" strokeWidth="2"></circle>
                        <path stroke="currentColor" strokeLinecap="round" strokeWidth="2" d="M11.25 9a4.5 4.5 0 0 0-9 0M15.75 9a4.5 4.5 0 1 1-9 0"></path>
                      </svg>
                    </button>
                    <span className="text-white text-xs font-semibold bg-black/50 backdrop-blur-sm rounded-full px-2 py-0.5 mt-1">
                      {remixFeed.length}
                    </span>
                  </div>
                )}
              </motion.div>

              {/* Remix Dot Indicators - Bottom Center */}
              {hasRemixes && (
                <motion.div 
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ 
                    opacity: showControls ? 1 : 0,
                    y: showControls ? 0 : 20
                  }}
                  transition={{ duration: 0.3 }}
                  className="absolute bottom-4 left-1/2 transform -translate-x-1/2 z-40"
                  style={{ pointerEvents: showControls ? 'auto' : 'none' }}
                >
                  <div className="flex items-center gap-1.5 bg-black/50 backdrop-blur-sm rounded-full px-3 py-1.5">
                    {/* Original video dot */}
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        goToRemixIndex(0);
                      }}
                      className={`w-1.5 h-1.5 rounded-full transition-all ${
                        currentRemixIndex === 0 
                          ? 'bg-white scale-125' 
                          : 'bg-white/50 hover:bg-white/70'
                      }`}
                    />
                    
                    {/* Remix dots */}
                    {remixFeed.slice(0, 10).map((_, index) => (
                      <button
                        key={index}
                        onClick={(e) => {
                          e.stopPropagation();
                          goToRemixIndex(index + 1);
                        }}
                        className={`w-1.5 h-1.5 rounded-full transition-all ${
                          currentRemixIndex === index + 1
                            ? 'bg-white scale-125' 
                            : 'bg-white/50 hover:bg-white/70'
                        }`}
                      />
                    ))}
                    
                    {remixFeed.length > 10 && (
                      <span className="text-white/70 text-xs ml-0.5">...</span>
                    )}
                  </div>
                </motion.div>
              )}
            </div>
          </div>

          {/* Next Remix */}
          {hasRemixes && canGoRight && (
            <div 
              className="absolute inset-0 w-full h-screen flex items-center justify-center"
              style={{ transform: 'translateX(100%)' }}
            >
              <video
                src={currentRemixIndex === 0 
                  ? remixFeed[0]?.post.attachments[0]?.encodings?.md?.path || 
                    remixFeed[0]?.post.attachments[0]?.encodings?.source?.path
                  : remixFeed[currentRemixIndex]?.post.attachments[0]?.encodings?.md?.path || 
                    remixFeed[currentRemixIndex]?.post.attachments[0]?.encodings?.source?.path}
                className="h-screen w-auto max-w-full object-contain"
                loop
                muted
                playsInline
                preload="metadata"
                poster={currentRemixIndex === 0 
                  ? remixFeed[0]?.post.attachments[0]?.encodings?.thumbnail?.path
                  : remixFeed[currentRemixIndex]?.post.attachments[0]?.encodings?.thumbnail?.path}
              />
            </div>
          )}
        </motion.div>

        {/* Preload additional remixes for better performance */}
        <div className="absolute -left-full top-0 w-full h-screen opacity-0 pointer-events-none">
          {/* Preload next remix */}
          {hasRemixes && currentRemixIndex < remixFeed.length - 1 && (
            <video
              src={currentRemixIndex === 0 
                ? remixFeed[1]?.post.attachments[0]?.encodings?.md?.path || 
                  remixFeed[1]?.post.attachments[0]?.encodings?.source?.path
                : remixFeed[currentRemixIndex + 1]?.post.attachments[0]?.encodings?.md?.path || 
                  remixFeed[currentRemixIndex + 1]?.post.attachments[0]?.encodings?.source?.path}
              preload="metadata"
              muted
              playsInline
              className="w-full h-full object-contain"
            />
          )}
          
          {/* Preload previous remix */}
          {hasRemixes && currentRemixIndex > 1 && (
            <video
              src={remixFeed[currentRemixIndex - 3]?.post.attachments[0]?.encodings?.md?.path || 
                   remixFeed[currentRemixIndex - 3]?.post.attachments[0]?.encodings?.source?.path}
              preload="none"
              muted
              playsInline
              className="w-full h-full object-contain"
            />
          )}
        </div>
      </div>
  );
}
