{"fsPath":"\\home\\hendo420\\soraFeed\\test-auth.js","fileUuid":"dfbcde2b-71ae-4cd8-a90a-6ef77cc14685","fileSizeBytes":3021,"numLines":103,"diffChanges":[{"originalStartLineNumberOneIndexed":1,"originalEndLineNumberExclusiveOneIndexed":1,"modifiedStartLineNumberOneIndexed":1,"modifiedEndLineNumberExclusiveOneIndexed":104,"addedLines":["const { Pool } = require('pg');","","async function testConnection(config, description) {","  console.log(`\\nüîç Testing: ${description}`);","  console.log(`   Host: ${config.host}:${config.port}`);","  console.log(`   Database: ${config.database}`);","  console.log(`   User: ${config.user}`);","  console.log(`   Password: ${config.password ? '[SET]' : '[EMPTY]'}`);","  ","  const pool = new Pool(config);","  ","  try {","    const client = await pool.connect();","    const result = await client.query('SELECT current_user, current_database()');","    console.log(`   ‚úÖ SUCCESS! Connected as: ${result.rows[0].current_user} to database: ${result.rows[0].current_database}`);","    client.release();","    await pool.end();","    return config;","  } catch (error) {","    console.log(`   ‚ùå FAILED: ${error.message}`);","    await pool.end();","    return null;","  }","}","","async function findWorkingConnection() {","  console.log('üîç Testing different PostgreSQL connection methods...');","  ","  const configs = [","    // Try with empty password (peer auth)","    {","      host: 'localhost',","      port: 5432,","      database: 'postgres',","      user: 'postgres',","      password: ''","    },","    // Try with null password","    {","      host: 'localhost',","      port: 5432,","      database: 'postgres',","      user: 'postgres',","      password: null","    },","    // Try with postgres password","    {","      host: 'localhost',","      port: 5432,","      database: 'postgres',","      user: 'postgres',","      password: 'postgres'","    },","    // Try as current system user","    {","      host: 'localhost',","      port: 5432,","      database: 'postgres',","      user: process.env.USER || 'hendo420',","      password: ''","    },","    // Try with trust method (no password)","    {","      host: 'localhost',","      port: 5432,","      database: 'postgres',","      user: 'postgres'","      // No password field at all","    }","  ];","  ","  for (const config of configs) {","    const workingConfig = await testConnection(config, `${config.user}@${config.database} with ${config.password ? 'password' : 'no password'}`);","    if (workingConfig) {","      console.log('\\nüéâ Found working configuration!');","      return workingConfig;","    }","  }","  ","  console.log('\\n‚ùå No working configuration found');","  console.log('\\nüí° Possible solutions:');","  console.log('1. Set postgres user password:');","  console.log('   sudo -u postgres psql -c \"ALTER USER postgres PASSWORD \\'postgres\\';\"');","  console.log('2. Create database user for current system user:');","  console.log('   sudo -u postgres createuser --superuser $USER');","  console.log('3. Check PostgreSQL configuration:');","  console.log('   sudo cat /etc/postgresql/*/main/pg_hba.conf');","  ","  return null;","}","","findWorkingConnection().then(config => {","  if (config) {","    console.log('\\nüìù Update your .env file with:');","    console.log(`DB_HOST=${config.host}`);","    console.log(`DB_PORT=${config.port}`);","    console.log(`DB_USER=${config.user}`);","    console.log(`DB_PASSWORD=${config.password || ''}`);","    console.log(`DB_NAME=sora_feed`);","  }","  process.exit(config ? 0 : 1);","});",""],"tokenizedAddedLines":[1000000,1000001,1000002,1000003,1000004,1000005,1000006,1000007,1000008,1000009,1000008,1000010,1000011,1000012,1000013,1000014,1000015,1000016,1000017,1000018,1000015,1000019,1000020,1000021,1000001,1000022,1000023,1000008,1000024,1000025,1000026,1000027,1000028,1000029,1000030,1000031,1000032,1000033,1000026,1000027,1000028,1000029,1000030,1000034,1000032,1000035,1000026,1000027,1000028,1000029,1000030,1000036,1000032,1000037,1000026,1000027,1000028,1000029,1000038,1000031,1000032,1000039,1000026,1000027,1000028,1000029,1000040,1000041,1000042,1000043,1000008,1000044,1000045,1000046,1000047,1000048,1000042,1000020,1000008,1000049,1000050,1000051,1000052,1000053,1000054,1000055,1000056,1000008,1000057,1000021,1000001,1000058,1000059,1000060,1000061,1000062,1000063,1000064,1000065,1000020,1000066,1000067,1000001]}],"gitInfo":{"noRepoFound":true},"kind":"KIND_ADDED"}