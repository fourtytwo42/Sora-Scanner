{"fsPath":"\\home\\hendo420\\soraFeed\\README_SCANNER.md","fileUuid":"a5cc74f8-56b1-4aaf-b63e-85525a8b33f0","fileSizeBytes":7788,"numLines":333,"diffChanges":[{"originalStartLineNumberOneIndexed":1,"originalEndLineNumberExclusiveOneIndexed":1,"modifiedStartLineNumberOneIndexed":1,"modifiedEndLineNumberExclusiveOneIndexed":334,"addedLines":["# Sora Feed Scanner System","","A PostgreSQL-based scanner system that continuously monitors the Sora API and indexes posts to a local database.","","## üéØ Features","","- **Automatic Polling**: Fetches latest 200 posts from Sora API every 10 seconds","- **Duplicate Detection**: Uses PostgreSQL PRIMARY KEY constraint to prevent duplicate posts","- **Real-time Dashboard**: Beautiful debug interface with live metrics","- **Full Data Storage**: Stores complete post and profile data as JSONB","- **Performance Optimized**: Indexed queries, batched inserts, and transaction safety","- **Graceful Shutdown**: Proper cleanup on SIGINT/SIGTERM signals","","## üìÅ Files Created","","### Core Files","- `src/lib/db.ts` - Database connection and initialization","- `scripts/scanner.js` - Main scanner service","- `src/app/api/scanner/stats/route.ts` - API endpoint for stats","- `src/app/scanner-debug/page.tsx` - Debug dashboard UI","","### Configuration","- `env.example` - Environment variables template","- `DATABASE_SETUP.md` - Detailed setup guide","- `package.json` - Updated with PostgreSQL dependencies","","## üöÄ Quick Start","","### 1. Install PostgreSQL (if not already installed)","","```bash","sudo apt-get update","sudo apt-get install postgresql postgresql-contrib","```","","### 2. Create Database","","```bash","sudo -u postgres psql","CREATE DATABASE sora_feed;","\\q","```","","### 3. Configure Environment","","```bash","cp env.example .env","```","","Edit `.env` with your database credentials:","```env","DB_HOST=localhost","DB_PORT=5432","DB_NAME=sora_feed","DB_USER=postgres","DB_PASSWORD=your_password","```","","### 4. Install Dependencies","","```bash","npm install","```","","### 5. Start Scanner","","In one terminal:","```bash","npm run scanner","```","","### 6. Start Next.js App","","In another terminal:","```bash","npm run dev","```","","### 7. View Dashboard","","Open browser to:","```","http://localhost:3000/scanner-debug","```","","## üìä Dashboard Features","","The scanner debug dashboard at `/scanner-debug` shows:","","### Live Metrics","- **Status Indicator**: Real-time scanner status (scanning, success, error, idle)","- **Total Scanned**: Cumulative count of all posts processed","- **New Posts**: Number of unique posts added to database","- **Duplicates**: Number of duplicate posts detected and skipped","","### Scanner Info","- Last scan timestamp","- Scan duration (in milliseconds)","- Total errors encountered","- Last error message (if any)","","### Database Stats","- Total posts in database","- Posts per day (last 7 days)","- Recent posts table (last 10 indexed)","","### Auto-Refresh","- Dashboard auto-refreshes every 2 seconds","- Toggle auto-refresh on/off with button","","## üóÑÔ∏è Database Schema","","### `sora_posts` Table","```sql","CREATE TABLE sora_posts (","  id TEXT PRIMARY KEY,              -- Unique post ID from API","  post_data JSONB NOT NULL,         -- Full post JSON","  profile_data JSONB NOT NULL,      -- Full profile JSON","  text TEXT,                        -- Post caption/text","  posted_at BIGINT,                 -- Original post timestamp","  updated_at BIGINT,                -- Last update timestamp","  like_count INTEGER DEFAULT 0,     -- Number of likes","  view_count INTEGER DEFAULT 0,     -- Number of views","  remix_count INTEGER DEFAULT 0,    -- Number of remixes","  permalink TEXT,                   -- Permanent link","  indexed_at TIMESTAMP DEFAULT NOW, -- When indexed","  last_updated TIMESTAMP DEFAULT NOW",");","```","","**Indexes:**","- `idx_sora_posts_posted_at` - Fast sorting by post time","- `idx_sora_posts_indexed_at` - Fast sorting by index time","- `idx_sora_posts_text` - Full-text search on text","","### `scanner_stats` Table","```sql","CREATE TABLE scanner_stats (","  id SERIAL PRIMARY KEY,","  total_scanned INTEGER DEFAULT 0,","  new_posts INTEGER DEFAULT 0,","  duplicate_posts INTEGER DEFAULT 0,","  errors INTEGER DEFAULT 0,","  last_scan_at TIMESTAMP DEFAULT NOW,","  scan_duration_ms INTEGER DEFAULT 0,","  status TEXT DEFAULT 'idle',","  error_message TEXT",");","```","","## üîß Scanner Operation","","### How it Works","","1. **Initialization**: Creates database tables if they don't exist","2. **Fetch**: Makes HTTPS request to Sora API for latest 200 posts","3. **Process**: ","   - Checks each post ID against database","   - Inserts new posts (skips duplicates due to PRIMARY KEY)","   - Updates statistics","4. **Loop**: Waits 10 seconds, repeats","","### Error Handling","","- API errors are caught and logged","- Database transaction rollback on errors","- Error count and message stored in `scanner_stats`","- Scanner continues running after errors","","### Graceful Shutdown","","Press `Ctrl+C` to stop scanner:","- Updates status to 'stopped' in database","- Closes database connection pool","- Exits cleanly","","## üìà Monitoring","","### SQL Queries","","Connect to database:","```bash","psql -U postgres -d sora_feed","```","","Useful queries:","```sql","-- Total posts","SELECT COUNT(*) FROM sora_posts;","","-- Posts today","SELECT COUNT(*) FROM sora_posts ","WHERE indexed_at::date = CURRENT_DATE;","","-- Recent posts with text","SELECT id, text, indexed_at ","FROM sora_posts ","ORDER BY indexed_at DESC ","LIMIT 10;","","-- Scanner status","SELECT * FROM scanner_stats;","","-- Top posts by engagement (when available)","SELECT id, text, like_count + view_count as engagement","FROM sora_posts ","ORDER BY engagement DESC ","LIMIT 20;","","-- Search posts","SELECT id, text, permalink","FROM sora_posts","WHERE text ILIKE '%keyword%'","ORDER BY indexed_at DESC;","```","","### Logs","","Scanner outputs structured logs:","```","üîç [timestamp] Starting scan...","üì• Fetched N posts from API","‚úÖ Scan complete:","   - New posts: X","   - Duplicates: Y","   - Total: Z","   - Duration: Nms","```","","Save logs to file:","```bash","npm run scanner 2>&1 | tee scanner.log","```","","## üîê Security Considerations","","1. **Database Credentials**: Never commit `.env` file to git","2. **API Rate Limiting**: Scanner polls every 10 seconds (6 requests/minute)","3. **Connection Pooling**: Limited to 20 max connections","4. **JSONB Storage**: Full data preserved for future analysis","","## üö® Troubleshooting","","### Scanner won't start","","**Problem**: Connection refused","**Solution**: Check PostgreSQL is running:","```bash","sudo systemctl status postgresql","sudo systemctl start postgresql","```","","### Authentication failed","","**Problem**: Password error","**Solution**: Set PostgreSQL password:","```bash","sudo -u postgres psql","ALTER USER postgres WITH PASSWORD 'your_password';","```","","### No new posts","","**Problem**: All duplicates","**Solution**: Normal! Scanner only adds unique posts. Check dashboard for duplicate count.","","### Dashboard shows error","","**Problem**: API route failing","**Solution**: ","1. Check `.env` variables","2. Verify database connection","3. Check Next.js logs for errors","","### High duplicate rate","","**Problem**: 99% duplicates","**Solution**: This is expected! Sora's latest feed changes slowly. Scanner catches new posts as they appear.","","## üìä Performance","","- **Scan Duration**: Typically 500-2000ms per cycle","- **Database Size**: ~1KB per post (JSONB compressed)","- **Memory Usage**: ~50MB scanner + ~100MB PostgreSQL","- **CPU Usage**: <5% on modern hardware","","## üîÑ Maintenance","","### Backup Database","```bash","pg_dump -U postgres sora_feed > backup_$(date +%Y%m%d).sql","```","","### Clear Old Data (Example: Keep last 30 days)","```sql","DELETE FROM sora_posts ","WHERE indexed_at < NOW() - INTERVAL '30 days';","```","","### Vacuum Database","```sql","VACUUM ANALYZE sora_posts;","VACUUM ANALYZE scanner_stats;","```","","## üéâ Success Indicators","","‚úÖ Scanner shows \"success\" status","‚úÖ New posts incrementing","‚úÖ No errors in logs","‚úÖ Dashboard auto-refreshing","‚úÖ Database growing with posts","","## üìù Next Steps","","Once scanner is running, you can:","- Query database for analytics","- Build custom feeds from indexed posts","- Add search functionality","- Create post recommendation system","- Export data for machine learning","- Build trending post algorithms","","## ü§ù Contributing","","Feel free to extend the system:","- Add more API endpoints (trending, search, etc.)","- Enhance dashboard with charts","- Add notification system for viral posts","- Implement caching layers","- Add data export features","",""],"tokenizedAddedLines":[1000000,1000001,1000002,1000001,1000003,1000001,1000004,1000005,1000006,1000007,1000008,1000009,1000001,1000010,1000001,1000011,1000012,1000013,1000014,1000015,1000001,1000016,1000017,1000018,1000019,1000001,1000020,1000001,1000021,1000001,1000022,1000023,1000024,1000025,1000001,1000026,1000001,1000022,1000027,1000028,1000029,1000025,1000001,1000030,1000001,1000022,1000031,1000025,1000001,1000032,1000033,1000034,1000035,1000036,1000037,1000038,1000025,1000001,1000039,1000001,1000022,1000040,1000025,1000001,1000041,1000001,1000042,1000022,1000043,1000025,1000001,1000044,1000001,1000045,1000022,1000046,1000025,1000001,1000047,1000001,1000048,1000025,1000049,1000025,1000001,1000050,1000001,1000051,1000001,1000052,1000053,1000054,1000055,1000056,1000001,1000057,1000058,1000059,1000060,1000061,1000001,1000062,1000063,1000064,1000065,1000001,1000066,1000067,1000068,1000001,1000069,1000001,1000070,1000071,1000072,1000073,1000074,1000075,1000076,1000077,1000078,1000079,1000080,1000081,1000082,1000083,1000084,1000085,1000025,1000001,1000086,1000087,1000088,1000089,1000001,1000090,1000071,1000091,1000092,1000093,1000094,1000095,1000096,1000097,1000098,1000099,1000100,1000085,1000025,1000001,1000101,1000001,1000102,1000001,1000103,1000104,1000105,1000106,1000107,1000108,1000109,1000001,1000110,1000001,1000111,1000112,1000113,1000114,1000001,1000115,1000001,1000116,1000117,1000118,1000119,1000001,1000120,1000001,1000121,1000001,1000122,1000022,1000123,1000025,1000001,1000124,1000071,1000125,1000126,1000001,1000127,1000128,1000129,1000001,1000130,1000131,1000132,1000133,1000134,1000001,1000135,1000136,1000001,1000137,1000138,1000132,1000139,1000140,1000001,1000141,1000142,1000143,1000144,1000145,1000025,1000001,1000146,1000001,1000147,1000025,1000148,1000149,1000150,1000151,1000152,1000153,1000154,1000025,1000001,1000155,1000022,1000156,1000025,1000001,1000157,1000001,1000158,1000159,1000160,1000161,1000001,1000162,1000001,1000163,1000001,1000164,1000165,1000022,1000166,1000167,1000025,1000001,1000168,1000001,1000169,1000170,1000022,1000027,1000171,1000025,1000001,1000172,1000001,1000173,1000174,1000001,1000175,1000001,1000176,1000177,1000178,1000179,1000180,1000001,1000181,1000001,1000182,1000183,1000001,1000184,1000001,1000185,1000186,1000187,1000188,1000001,1000189,1000001,1000190,1000022,1000191,1000025,1000001,1000192,1000071,1000193,1000194,1000025,1000001,1000195,1000071,1000196,1000197,1000025,1000001,1000198,1000001,1000199,1000200,1000201,1000202,1000203,1000001,1000204,1000001,1000205,1000206,1000207,1000208,1000209,1000210,1000211,1000001,1000212,1000001,1000213,1000214,1000215,1000216,1000217,1000218,1000001,1000001]}],"gitInfo":{"noRepoFound":true},"kind":"KIND_ADDED"}