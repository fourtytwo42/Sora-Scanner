{"fsPath":"\\home\\hendo420\\soraFeed\\src\\lib\\db.ts","fileUuid":"e3334d38-016c-44d9-9fce-0f30895416de","fileSizeBytes":2955,"numLines":101,"diffChanges":[{"originalStartLineNumberOneIndexed":1,"originalEndLineNumberExclusiveOneIndexed":1,"modifiedStartLineNumberOneIndexed":1,"modifiedEndLineNumberExclusiveOneIndexed":102,"addedLines":["import { Pool } from 'pg';","","const pool = new Pool({","  host: process.env.DB_HOST || 'localhost',","  port: parseInt(process.env.DB_PORT || '5432'),","  database: process.env.DB_NAME || 'sora_feed',","  user: process.env.DB_USER || 'postgres',","  password: process.env.DB_PASSWORD || '',","  max: 20,","  idleTimeoutMillis: 30000,","  connectionTimeoutMillis: 2000,","});","","export async function query(text: string, params?: any[]) {","  const start = Date.now();","  try {","    const res = await pool.query(text, params);","    const duration = Date.now() - start;","    console.log('Executed query', { text, duration, rows: res.rowCount });","    return res;","  } catch (error) {","    console.error('Database query error:', error);","    throw error;","  }","}","","export async function getClient() {","  const client = await pool.connect();","  return client;","}","","export async function initDatabase() {","  const client = await getClient();","  try {","    // Create posts table","    await client.query(`","      CREATE TABLE IF NOT EXISTS sora_posts (","        id TEXT PRIMARY KEY,","        post_data JSONB NOT NULL,","        profile_data JSONB NOT NULL,","        text TEXT,","        posted_at BIGINT,","        updated_at BIGINT,","        like_count INTEGER DEFAULT 0,","        view_count INTEGER DEFAULT 0,","        remix_count INTEGER DEFAULT 0,","        permalink TEXT,","        indexed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,","        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,","        UNIQUE(id)","      );","    `);","","    // Create indexes for better query performance","    await client.query(`","      CREATE INDEX IF NOT EXISTS idx_sora_posts_posted_at ON sora_posts(posted_at DESC);","    `);","    ","    await client.query(`","      CREATE INDEX IF NOT EXISTS idx_sora_posts_indexed_at ON sora_posts(indexed_at DESC);","    `);","","    await client.query(`","      CREATE INDEX IF NOT EXISTS idx_sora_posts_text ON sora_posts USING gin(to_tsvector('english', text));","    `);","","    // Create scanner_stats table for tracking scanner metrics","    await client.query(`","      CREATE TABLE IF NOT EXISTS scanner_stats (","        id SERIAL PRIMARY KEY,","        total_scanned INTEGER DEFAULT 0,","        new_posts INTEGER DEFAULT 0,","        duplicate_posts INTEGER DEFAULT 0,","        errors INTEGER DEFAULT 0,","        last_scan_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,","        scan_duration_ms INTEGER DEFAULT 0,","        status TEXT DEFAULT 'idle'","      );","    `);","","    // Initialize scanner_stats if empty","    const statsCheck = await client.query('SELECT COUNT(*) FROM scanner_stats');","    if (parseInt(statsCheck.rows[0].count) === 0) {","      await client.query(`","        INSERT INTO scanner_stats (total_scanned, new_posts, duplicate_posts, errors, status)","        VALUES (0, 0, 0, 0, 'idle')","      `);","    }","","    console.log('✅ Database initialized successfully');","  } catch (error) {","    console.error('❌ Database initialization error:', error);","    throw error;","  } finally {","    client.release();","  }","}","","export default pool;","",""],"tokenizedAddedLines":[1000000,1000001,1000002,1000003,1000004,1000005,1000006,1000007,1000008,1000009,1000010,1000011,1000001,1000012,1000013,1000014,1000015,1000016,1000017,1000018,1000019,1000020,1000021,1000022,1000023,1000001,1000024,1000025,1000026,1000023,1000001,1000027,1000028,1000014,1000029,1000030,1000031,1000032,1000033,1000034,1000035,1000036,1000037,1000038,1000039,1000040,1000041,1000042,1000043,1000044,1000045,1000046,1000001,1000047,1000030,1000048,1000046,1000049,1000030,1000050,1000046,1000001,1000030,1000051,1000046,1000001,1000052,1000030,1000053,1000054,1000055,1000056,1000057,1000058,1000059,1000060,1000061,1000045,1000046,1000001,1000062,1000063,1000064,1000065,1000066,1000067,1000068,1000069,1000001,1000070,1000019,1000071,1000021,1000072,1000073,1000022,1000023,1000001,1000074,1000001,1000001]}],"gitInfo":{"noRepoFound":true},"kind":"KIND_ADDED"}