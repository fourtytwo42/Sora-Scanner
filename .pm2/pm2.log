2025-10-21T05:55:07: PM2 log: ===============================================================================
2025-10-21T05:55:07: PM2 log: --- New PM2 Daemon started ----------------------------------------------------
2025-10-21T05:55:07: PM2 log: Time                 : Tue Oct 21 2025 05:55:07 GMT+0000 (Coordinated Universal Time)
2025-10-21T05:55:07: PM2 log: PM2 version          : 6.0.13
2025-10-21T05:55:07: PM2 log: Node.js version      : 22.20.0
2025-10-21T05:55:07: PM2 log: Current arch         : x64
2025-10-21T05:55:07: PM2 log: PM2 home             : /home/hendo420/.pm2
2025-10-21T05:55:07: PM2 log: PM2 PID file         : /home/hendo420/.pm2/pm2.pid
2025-10-21T05:55:07: PM2 log: RPC socket file      : /home/hendo420/.pm2/rpc.sock
2025-10-21T05:55:07: PM2 log: BUS socket file      : /home/hendo420/.pm2/pub.sock
2025-10-21T05:55:07: PM2 log: Application log path : /home/hendo420/.pm2/logs
2025-10-21T05:55:07: PM2 log: Worker Interval      : 30000
2025-10-21T05:55:07: PM2 log: Process dump file    : /home/hendo420/.pm2/dump.pm2
2025-10-21T05:55:07: PM2 log: Concurrent actions   : 2
2025-10-21T05:55:07: PM2 log: SIGTERM timeout      : 1600
2025-10-21T05:55:07: PM2 log: Runtime Binary       : /home/hendo420/.nvm/versions/node/v22.20.0/bin/node
2025-10-21T05:55:07: PM2 log: ===============================================================================
2025-10-21T05:55:07: PM2 log: App [sora-feed-app:0] starting in -cluster mode-
2025-10-21T05:55:08: PM2 log: App [sora-feed-scanner:1] starting in -cluster mode-
2025-10-21T05:55:08: PM2 log: App [sora-feed-app:0] online
2025-10-21T05:55:08: PM2 log: App [sora-feed-scanner:1] online
   ▲ Next.js 15.5.6
   - Local:        http://localhost:3000
   - Network:      http://192.168.50.252:3000

 ✓ Starting...
 ✓ Ready in 362ms
🔍 Fetching latest posts from database: { limit: 20, offset: 0 }
✅ Found 20 latest posts from database
🔍 Fetching Sora remix feed for post: s_68f71d635aac819183b6db1d4c919a59 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d635aac819183b6db1d4c919a59/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f71d63313081918efb696a35ab2e3b with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d63313081918efb696a35ab2e3b/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f71d635aac819183b6db1d4c919a59 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d635aac819183b6db1d4c919a59/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8175fb2ef60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:23 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '152',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=21v.0YergRHlnNF6Ux.D2iOMbtKZ2hbP09lf1892UHQ-1761026123366-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '156',
  'x-oai-request-id': 'req_1f55f7d621f205b519d0ed5869b539e4',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '17d7ead3-9fbd-44aa-b04c-c1ab6ac9cab7',
  'x-sora-request-id': 'req_1f55f7d621f205b519d0ed5869b539e4'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d635aac819183b6db1d4c919a59
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8175fe4a1233-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:23 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '141',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=vCcdi1vfPCoK0KhJfxiYObPO4JdkBBcheqAgAhXSvas-1761026123374-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '145',
  'x-oai-request-id': 'req_866582f161157d9423ef6952961f34ac',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '21d299c7-206f-9048-9622-095946558ce1',
  'x-sora-request-id': 'req_866582f161157d9423ef6952961f34ac'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d63313081918efb696a35ab2e3b
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e81760f14381e-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:23 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '154',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=P6Ji5pqyRPNjm4QIcuIDbqUzPGDhW2umo_ocD2JQRDk-1761026123383-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '158',
  'x-oai-request-id': 'req_c97069965c29ae396745a17e217edf1f',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '6f4777db-3023-4f76-87b2-db7eaaa7d53c',
  'x-sora-request-id': 'req_c97069965c29ae396745a17e217edf1f'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d635aac819183b6db1d4c919a59
🔍 Fetching Sora remix feed for post: s_68f71d6305308191bff44e73f8d6aa4b with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d6305308191bff44e73f8d6aa4b/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f71d62fa888191b2ae8f5ae2ac5ed7 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d62fa888191b2ae8f5ae2ac5ed7/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8177af5f1233-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:23 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '142',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=xW0fg1r6qoFhegcoK.WD_qnp95hl8CVUdLq6OblxCnA-1761026123634-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '145',
  'x-oai-request-id': 'req_777a0eb3616a3f6147d38fb7759a1eb1',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'eb7b455f-2961-40c3-b9d1-d73203459c8a',
  'x-sora-request-id': 'req_777a0eb3616a3f6147d38fb7759a1eb1'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d62fa888191b2ae8f5ae2ac5ed7
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e81778dbaf60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:23 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '175',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=5awW2JyBwmZqi_P8rSMBsURx2iRT9PUndlFO_3jHjNM-1761026123662-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '198',
  'x-oai-request-id': 'req_2dc9b3924c76f84a387c9ed10ff30da6',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '26060576-b061-475e-8668-53c9f26459d1',
  'x-sora-request-id': 'req_2dc9b3924c76f84a387c9ed10ff30da6'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d6305308191bff44e73f8d6aa4b
🔍 Fetching Sora remix feed for post: s_68f71d62f3c48191b6bf46bf5b4af6bf with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d62f3c48191b6bf46bf5b4af6bf/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f71d62c06c8191a5fffc71534d1901 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d62c06c8191a5fffc71534d1901/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e817998891233-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:23 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '137',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=zfcuYOOn3r933_NVpO.4wCpQNwSFL2mltaRP9Mhm014-1761026123930-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '140',
  'x-oai-request-id': 'req_a32d7a730b824955f413acf89700bb71',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'cd7cc9f4-6446-44df-93ce-cec743993cf0',
  'x-sora-request-id': 'req_a32d7a730b824955f413acf89700bb71'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d62c06c8191a5fffc71534d1901
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8179893ef60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:23 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '144',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=riCbjnkpV80yZ2ZPbKbvnQrd3mUpfYTrDR6q_4h52nA-1761026123938-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '147',
  'x-oai-request-id': 'req_c343573da3ed28d61e5a9d91dcd03551',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e7fa4bad-9475-4d77-8038-6ec77b38b471',
  'x-sora-request-id': 'req_c343573da3ed28d61e5a9d91dcd03551'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d62f3c48191b6bf46bf5b4af6bf
🔍 Fetching Sora remix feed for post: s_68f71d62ad848191881a39ffa488227e with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d62ad848191881a39ffa488227e/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f71d6242088191a9df00dbc87d764a with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d6242088191a9df00dbc87d764a/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e817adb6ff60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:24 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '152',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=h73n9gMcWAl1H6hYGFBD8XWsz_B9oaCvIosyvxYyzb4-1761026124145-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '155',
  'x-oai-request-id': 'req_89622bd4bd0e3b1719c43bed0a90c271',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '48694d61-e47e-4a7d-9e95-4c3ff7932d60',
  'x-sora-request-id': 'req_89622bd4bd0e3b1719c43bed0a90c271'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d62ad848191881a39ffa488227e
🔍 Fetching Sora remix feed for post: s_68f71d61f59081918d41d90ccb542f7d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d61f59081918d41d90ccb542f7d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e817ad9461233-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:24 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '170',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=YpUFo4pV0CzgJWiaixcA64Sut7QBXQVCX7Y9nU.n8p8-1761026124170-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '173',
  'x-oai-request-id': 'req_555127c957cadfe52d76b0002a82c555',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'c9d43195-666c-43e9-8b06-0af025df54a0',
  'x-sora-request-id': 'req_555127c957cadfe52d76b0002a82c555'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d6242088191a9df00dbc87d764a
🔍 Fetching Sora remix feed for post: s_68f71d61d8688191a47e817c5da3f8c3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d61d8688191a47e817c5da3f8c3/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e817c2d67f60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:24 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '143',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=J6KDZQAeR5Xlhonby67yyJZYKTJK6TB20s8KIcoVSyY-1761026124351-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '146',
  'x-oai-request-id': 'req_3150fb4441d7d2234ae17c98851d32ab',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e8ad7e35-05e2-42c8-9dc5-2b5374b4a274',
  'x-sora-request-id': 'req_3150fb4441d7d2234ae17c98851d32ab'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d61f59081918d41d90ccb542f7d
🔍 Fetching Sora remix feed for post: s_68f71d6165c08191b455fcf6acecf6be with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d6165c08191b455fcf6acecf6be/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e817cca5e1233-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:24 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=RNhuSH1SFVIvnZxiHW6EtEqBFHNyrrhP_.iM1uEF1Oo-1761026124437-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_f8140c169395b2acc26f2d51536f7c1d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'bd190718-d681-49b4-ac86-521c62b23e37',
  'x-sora-request-id': 'req_f8140c169395b2acc26f2d51536f7c1d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d61d8688191a47e817c5da3f8c3
🔍 Fetching Sora remix feed for post: s_68f71d615cf881918d79e0f208f32780 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d615cf881918d79e0f208f32780/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e817e1b311233-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:24 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '177',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=MlZqNiiZ_kxPqt9I8sQlgYVKVqGNOVToLHFcmVjPC1A-1761026124693-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '180',
  'x-oai-request-id': 'req_2f87db3d89bc1a31170fa93add003d96',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'c717ed36-37ac-41b4-9018-3e3fb8c26fdd',
  'x-sora-request-id': 'req_2f87db3d89bc1a31170fa93add003d96'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d615cf881918d79e0f208f32780
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e817d7f38f60c-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:24 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '250',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=xfppmDmeq.juKUi3y4nSd8QtBXiuMv9.ociBnonPmuw-1761026124742-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '335',
  'x-oai-request-id': 'req_5a1569e5616a1e156742aa51a5c2453f',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '0f7f7b68-c48b-477c-9613-a56d844af019',
  'x-sora-request-id': 'req_5a1569e5616a1e156742aa51a5c2453f'
}
✅ Successfully fetched remix feed with 1 video remixes
💾 Cached remix feed for post: s_68f71d6165c08191b455fcf6acecf6be
🔍 Fetching Sora remix feed for post: s_68f71d6137848191b8055635ca28c1e7 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d6137848191b8055635ca28c1e7/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f71d6115b48191bfd8559b7478830c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d6115b48191bfd8559b7478830c/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e81801c731233-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:24 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=zk4zSLvscZ4mC64YHyafOuLXvu5tjViYhf4dhOExIOM-1761026124967-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '132',
  'x-oai-request-id': 'req_e7f2630222e3e7c6be8972e45801005f',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '182605b2-df44-45b0-81a8-b79405aee080',
  'x-sora-request-id': 'req_e7f2630222e3e7c6be8972e45801005f'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d6115b48191bfd8559b7478830c
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e81801b4bf60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:24 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '157',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.3JsfahAcDK_3Uk7657Az9akkPq_yXxlyB6Wn8FeXqg-1761026124991-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '160',
  'x-oai-request-id': 'req_2f8e00e4e75160b21744aea5a7c86aca',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'f79183cc-a3d9-484d-bf7e-bd36e4bdadbb',
  'x-sora-request-id': 'req_2f8e00e4e75160b21744aea5a7c86aca'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d6137848191b8055635ca28c1e7
🔍 Fetching Sora remix feed for post: s_68f71d60da58819185022456961b2116 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d60da58819185022456961b2116/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f71d60cfd081918056bdd33ce4a3c5 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d60cfd081918056bdd33ce4a3c5/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e818418f3f60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:25 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '111',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=7QVS8PSHLHilC5Tn6V5BEwpqVWwFGxbsmqNXBtHKwRA-1761026125582-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '115',
  'x-oai-request-id': 'req_bec00360aadc85688ce5a6807132bafb',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ec1d580f-9c42-4651-bbd6-ce1a9e536cc2',
  'x-sora-request-id': 'req_bec00360aadc85688ce5a6807132bafb'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d60da58819185022456961b2116
🔍 Fetching Sora remix feed for post: s_68f71d60be9481918627124e206136f1 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d60be9481918627124e206136f1/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e81859b38f60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:25 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '143',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=qOVl7tv3zvHYe9dkSnzOpQQiIzUC8UZcOGGukoISO6U-1761026125853-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '146',
  'x-oai-request-id': 'req_d980b625bc145d3cd12559e759178209',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '6620ba1c-bc72-43cb-b67c-cabcfb3f6e0d',
  'x-sora-request-id': 'req_d980b625bc145d3cd12559e759178209'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d60be9481918627124e206136f1
🔍 Fetching Sora remix feed for post: s_68f71d60a9b081918d585b76cbea9bf7 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d60a9b081918d585b76cbea9bf7/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8186fd21f60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:26 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '140',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=xyZkS4GJM0Zj_vsyu4njNk5jSRmAfO8EcK.1eTba__s-1761026126068-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '143',
  'x-oai-request-id': 'req_fbe4f00f6faf1ca91eae3db720df5f91',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'dbd46cc3-2623-46e1-b053-f6f45acf962f',
  'x-sora-request-id': 'req_fbe4f00f6faf1ca91eae3db720df5f91'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d60a9b081918d585b76cbea9bf7
🔍 Fetching Sora remix feed for post: s_68f71d609fec81918ca4720b5f03e09f with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d609fec81918ca4720b5f03e09f/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e81841f221233-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:26 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '586',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=tNaR14PcgHfjOHoGDlowzICQcHpDg065Wn.HucaEUBE-1761026126124-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '642',
  'x-oai-request-id': 'req_383e45f511be11c518faf25530ebedcb',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '92d1ce71-9bf5-4d68-ba26-69759f0c2c60',
  'x-sora-request-id': 'req_383e45f511be11c518faf25530ebedcb'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d60cfd081918056bdd33ce4a3c5
🔍 Fetching Sora remix feed for post: s_68f71d609b1c819186af9fb9a7e187b3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71d609b1c819186af9fb9a7e187b3/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 11,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e81884edff60c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:26 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '147',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=xsLvdDd_O71vQUWDVKjgC8dkzX.JPJAMpEQJ_keqfWM-1761026126298-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '151',
  'x-oai-request-id': 'req_f3a10ac998b44210330755f78cd0b907',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '141d16cc-f7cc-4ac7-8211-faa54e56145c',
  'x-sora-request-id': 'req_f3a10ac998b44210330755f78cd0b907'
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d609fec81918ca4720b5f03e09f
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8188fac61233-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:26 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '137',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=v8jew6NOBUCeFDfUoVuCzGTKMFPVSAOAEC29eK6ElE0-1761026126404-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '141',
  'x-oai-request-id': 'req_6fe3c99b1628f830f0cc10305b56558d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'a526b78e-2e55-41cb-a864-4ddb7c58030f',
  'x-sora-request-id': 'req_6fe3c99b1628f830f0cc10305b56558d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71d609b1c819186af9fb9a7e187b3
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 83,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 85,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 85,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching latest posts from database: { limit: 20, offset: 0 }
✅ Found 20 latest posts from database
🔍 Fetching Sora remix feed for post: s_68f7205233dc8191a6261308ced400bd with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7205233dc8191a6261308ced400bd/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72051fef48191826c1fcff0d76ad8 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72051fef48191826c1fcff0d76ad8/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7205233dc8191a6261308ced400bd with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7205233dc8191a6261308ced400bd/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8221a8f8acab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '126',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=M05YS84aZ6fkkUgqDU7KpDfSmW_wGXcERYOg45bN3p8-1761026150810-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '129',
  'x-oai-request-id': 'req_3bb536015fcc01b0d2c250a111a03bb0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '812ec0ff-f976-4e8f-bf80-3f1fa68eb7a9',
  'x-sora-request-id': 'req_3bb536015fcc01b0d2c250a111a03bb0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7205233dc8191a6261308ced400bd
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8221a95b1127-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=o5C6SuljydW1xz.Xvv29ShPW6ueBaQlJ2t.Px2teTWE-1761026150814-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_eea83a1a1c5f2bfc3bc8a25f4d618a69',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '782b91e6-4934-4ac6-ac1b-daa8d9d880d5',
  'x-sora-request-id': 'req_eea83a1a1c5f2bfc3bc8a25f4d618a69'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72051fef48191826c1fcff0d76ad8
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8221bcb610f5-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '114',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=8pD_8UvV_4jmg0gI4taR.LjsVSGMntDDcl.BwVErh.M-1761026150816-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '117',
  'x-oai-request-id': 'req_3d4b467f2b24bf80c73b8b0e73b6f458',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ee86ca57-e7e8-47a4-80bb-eb13c01bca87',
  'x-sora-request-id': 'req_3d4b467f2b24bf80c73b8b0e73b6f458'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7205233dc8191a6261308ced400bd
🔍 Fetching Sora remix feed for post: s_68f72051dae08191bbbb1a30a38b5778 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72051dae08191bbbb1a30a38b5778/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7205199848191b52f71aaf19ba6ee with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7205199848191b52f71aaf19ba6ee/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82233a961127-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '123',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=QpHU1y7rZsKGjL8XN.JaOJ1MT4j4jB1PuyPoz9DC8nM-1761026151058-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '125',
  'x-oai-request-id': 'req_756b4cd05c93f071a8e2d02477fc8df0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7cc2e966-043f-4da6-b918-8c6fe4e5f608',
  'x-sora-request-id': 'req_756b4cd05c93f071a8e2d02477fc8df0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7205199848191b52f71aaf19ba6ee
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82233b38acab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '146',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=NXiiOa1pY6.nbNYm37ERrPNT_8eKieX.qvL4gEyNQ88-1761026151081-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '150',
  'x-oai-request-id': 'req_fb1cbd1d37a05089b36dfe0af2ae193b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '78297c8c-a549-4719-9c6d-04319efddc57',
  'x-sora-request-id': 'req_fb1cbd1d37a05089b36dfe0af2ae193b'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72051dae08191bbbb1a30a38b5778
🔍 Fetching Sora remix feed for post: s_68f7205198288191b29bf05b2bb3343e with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7205198288191b29bf05b2bb3343e/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72050f0548191addbfc2fca9a5c1e with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72050f0548191addbfc2fca9a5c1e/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82251dd7acab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '144',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=myeU5y0lD.GpBJ1pupd8LCUu_HPUu.BVM70JgxSPkog-1761026151375-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '147',
  'x-oai-request-id': 'req_ba1c2ddc87d600cfc90b0bf1b927003c',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7af829d8-212b-4fd6-9970-70a10987627f',
  'x-sora-request-id': 'req_ba1c2ddc87d600cfc90b0bf1b927003c'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7205198288191b29bf05b2bb3343e
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82251bdb1127-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '157',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=P5nrzErVg9g45dIbg.mL0PaohTNS6O1Z5JDqp1BNss0-1761026151396-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '162',
  'x-oai-request-id': 'req_7f172777314ccc21be89394db88cc14e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '1f0b078e-0b20-48c0-8562-2b14bf1a5a45',
  'x-sora-request-id': 'req_7f172777314ccc21be89394db88cc14e'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72050f0548191addbfc2fca9a5c1e
🔍 Fetching Sora remix feed for post: s_68f72050d238819192e5117d60d800bb with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72050d238819192e5117d60d800bb/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72050bd6c8191a9e527d3b2bcc8b6 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72050bd6c8191a9e527d3b2bcc8b6/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82266f99acab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '123',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=8GhXOHyMMi3Gk5yRNckPxgHcijzvIp_MR4skSCaQmig-1761026151564-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '127',
  'x-oai-request-id': 'req_19baa57c20c61eef0d320f37a6b6a834',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5f555778-c046-4e45-bd47-19170a42db9b',
  'x-sora-request-id': 'req_19baa57c20c61eef0d320f37a6b6a834'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72050d238819192e5117d60d800bb
🔍 Fetching Sora remix feed for post: s_68f7205088908191b41feb31c3f8b745 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7205088908191b41feb31c3f8b745/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 12,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8227b94facab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '153',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=IB_FBFMeafBKAz4g3FbInJmjB7seVmvq0OM_tij9Njg-1761026151806-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '157',
  'x-oai-request-id': 'req_746dbdefee0be8fcc309e133f3b0dcca',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '348c2019-de29-4343-ad39-73b7339212a3',
  'x-sora-request-id': 'req_746dbdefee0be8fcc309e133f3b0dcca'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7205088908191b41feb31c3f8b745
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 84,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching Sora remix feed for post: s_68f72050818c8191a1e55fb1412a2027 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72050818c8191a1e55fb1412a2027/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82266cb31127-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '437',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=z2i22GPo.oX5sBvHGE3UAnp3W7omv3KZZNOY6YlR7YY-1761026151989-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '545',
  'x-oai-request-id': 'req_bfc81ecc5bd3052fa921dbee5caa7c6d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9d013950-ce38-4d26-a85e-0709b7862ef2',
  'x-sora-request-id': 'req_bfc81ecc5bd3052fa921dbee5caa7c6d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72050bd6c8191a9e527d3b2bcc8b6
🔍 Fetching Sora remix feed for post: s_68f7205020288191bc90b37a51e6c99c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7205020288191bc90b37a51e6c99c/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8229bc2eacab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=nlWZ5VtYqN05HrO9X6FqMIdOGwAQEjsBXjDMjNpGH70-1761026152103-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_9afd51fa07c9d4cfa3a11f4e42e64259',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '4510ea1b-5d2a-4b7a-8ec0-bf2557e60acd',
  'x-sora-request-id': 'req_9afd51fa07c9d4cfa3a11f4e42e64259'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72050818c8191a1e55fb1412a2027
🔍 Fetching Sora remix feed for post: s_68f7204fed808191809d508cd8b2a816 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7204fed808191809d508cd8b2a816/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e822a3f8b1127-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '130',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=r90B6PcQ10LdE.01pNoDCXgsRrrOIskQUOjs9qvjmZ0-1761026152184-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '134',
  'x-oai-request-id': 'req_7d8997dba81bbfc9da85850625b91289',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ca1f9b2f-c3f7-437b-b230-74e853fe6470',
  'x-sora-request-id': 'req_7d8997dba81bbfc9da85850625b91289'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7205020288191bc90b37a51e6c99c
🔍 Fetching Sora remix feed for post: s_68f7204f99348191a1785e4b46138957 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7204f99348191a1785e4b46138957/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e822add9bacab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '135',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=5n9adXazltnGR_CY3wDGp05SfyDY4I4fkli7hcm_1_c-1761026152291-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '139',
  'x-oai-request-id': 'req_e1e6f209b84f25588de5196e132c230d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'fbc3d7e3-861c-4c11-bebb-a93b26122e19',
  'x-sora-request-id': 'req_e1e6f209b84f25588de5196e132c230d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7204fed808191809d508cd8b2a816
🔍 Fetching Sora remix feed for post: s_68f7204f8e588191a82253a75d202680 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7204f8e588191a82253a75d202680/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e822b78621127-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '139',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=0xQk1qO7K7ibTHEbUhIQXWgPZJJ5fzMgeOjLSV_uU.Q-1761026152393-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '142',
  'x-oai-request-id': 'req_3bedfbb4d7758ffdc045bf4a3e235e02',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '22fed698-c852-4b18-8548-05392b24df54',
  'x-sora-request-id': 'req_3bedfbb4d7758ffdc045bf4a3e235e02'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7204f99348191a1785e4b46138957
🔍 Fetching Sora remix feed for post: s_68f7204f81ac8191bfe58e69515d48f9 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7204f81ac8191bfe58e69515d48f9/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e822c3f67acab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '136',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=92oTo5AmAXk1MF6.bCtU1CLnXhkbp7IAWSyBl_ev2mk-1761026152506-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '139',
  'x-oai-request-id': 'req_d47fb86b6226cb1ac74ced80a6812f16',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '4b5fdf2e-f6e4-4782-a7c4-ae336e1c6c67',
  'x-sora-request-id': 'req_d47fb86b6226cb1ac74ced80a6812f16'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7204f8e588191a82253a75d202680
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e822ce94c1127-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '231',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=fedasdbhq2slSpCaaNeqARdwt5CIPTvHyC2pg8HRBYA-1761026152711-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '234',
  'x-oai-request-id': 'req_4a70edf9a0a18ac0a850f54ad5757610',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'cebfd617-9d7f-48bd-8491-882cdea8313f',
  'x-sora-request-id': 'req_4a70edf9a0a18ac0a850f54ad5757610'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7204f81ac8191bfe58e69515d48f9
🔍 Fetching Sora remix feed for post: s_68f7204f33808191ada161cb6c85c7b2 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7204f33808191ada161cb6c85c7b2/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7204f4ac08191aea20679b1d67f90 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7204f4ac08191aea20679b1d67f90/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82302c8dacab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '128',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.isVRzgjusdotwlijtfZc9quEu1IIkyPl2Pgw7OLKuI-1761026153130-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '132',
  'x-oai-request-id': 'req_a7e3c8bff32230e1ad708f67296eac76',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'fa65ee68-005a-439a-a5c6-d245f5c985dd',
  'x-sora-request-id': 'req_a7e3c8bff32230e1ad708f67296eac76'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7204f33808191ada161cb6c85c7b2
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82302b991127-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '135',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=7Lf7BUpfPBCLZTMBmDcwo2SFqabVNxWN23NbOYdfD14-1761026153144-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '138',
  'x-oai-request-id': 'req_4626ae4cc9ded81c0cfd57b6df9e9182',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'c58bd87d-e09a-433a-b9e6-73ff6e0b3557',
  'x-sora-request-id': 'req_4626ae4cc9ded81c0cfd57b6df9e9182'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7204f4ac08191aea20679b1d67f90
🔍 Fetching Sora remix feed for post: s_68f7204f1870819194b27a56c1563fb1 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7204f1870819194b27a56c1563fb1/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7204f1da481919015d1d9d6189f24 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7204f1da481919015d1d9d6189f24/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82316e61acab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '126',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Ye4JSTh_yTrM_GDWfGhIQLQf7AWC_tw2kVFSbzZUQuA-1761026153337-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '130',
  'x-oai-request-id': 'req_7cfcf6d31f4d6bfdffba409fa1c63f1b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '749cd2c4-4b6f-4b04-ae76-b8ee3adcbfa5',
  'x-sora-request-id': 'req_7cfcf6d31f4d6bfdffba409fa1c63f1b'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7204f1870819194b27a56c1563fb1
🔍 Fetching Sora remix feed for post: s_68f7204f0ca88191b4166dd63a2ec193 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7204f0ca88191b4166dd63a2ec193/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82317c941127-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '176',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=6ErxDhx8ab_3qbGwa9tJqFfIlOJgtuXDQquu1D6AOY0-1761026153395-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '180',
  'x-oai-request-id': 'req_d8d939f07706b3337f4fcd649b7ad56e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '19a96849-3628-46e9-a8cf-e73b061f6537',
  'x-sora-request-id': 'req_d8d939f07706b3337f4fcd649b7ad56e'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7204f1da481919015d1d9d6189f24
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8232b80cacab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:55:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '138',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Ns5Sor90DoMY0Jpfe96UkfHaqEWVde2ezCtg8afXI1I-1761026153553-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '142',
  'x-oai-request-id': 'req_4bb43f98a21194544069116879f44561',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b986be01-b940-4248-97c7-62b20608571b',
  'x-sora-request-id': 'req_4bb43f98a21194544069116879f44561'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7204f0ca88191b4166dd63a2ec193
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 85,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching Sora feed with params: { limit: '20', cut: 'nf2_top', cursor: 'none' }
🔑 Bearer token present: true
📡 Making request to: https://sora.chatgpt.com/backend/project_y/feed?limit=20&cut=nf2_top
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e826458ea7fb0-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:02 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '990',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=tUn05fWLfsWdNXXUuM7DbVb1o1n9JFHTAHc.gQHfXks-1761026162346-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '994',
  'x-oai-request-id': 'req_71c0eac4d9c0be3ae1dfaefde1e41c02',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '130fc8aa-d035-4f81-95da-9ca3fbc560d7',
  'x-sora-request-id': 'req_71c0eac4d9c0be3ae1dfaefde1e41c02'
}
✅ Successfully fetched feed with 15 items
💾 Cached top videos feed
🔍 Fetching Sora remix feed for post: s_68f5f08a22d08191866cf9be5e3e475d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5f08a22d08191866cf9be5e3e475d/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f6d0df913881919fbd1bb6d290e733 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6d0df913881919fbd1bb6d290e733/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f5f08a22d08191866cf9be5e3e475d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5f08a22d08191866cf9be5e3e475d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e826b2ae07fb0-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:03 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '749',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=fnS5iifbRO9KM1WPxa0b13sLNEuls0b6W_MroW5U.KI-1761026163193-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '753',
  'x-oai-request-id': 'req_02479d05b19c998eaa84d035d9690938',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '6750c54c-a241-4ba5-ad02-48a94bb3254a',
  'x-sora-request-id': 'req_02479d05b19c998eaa84d035d9690938'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5f08a22d08191866cf9be5e3e475d
🔍 Fetching Sora remix feed for post: s_68f609ae8ba4819191d65301b0f4e1f8 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f609ae8ba4819191d65301b0f4e1f8/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e826b6f3cca09-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:03 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '853',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=8JOAMD_iHwTXxU3JS41C.IyCf8u2v84hPUzKZ4zEhxo-1761026163341-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '857',
  'x-oai-request-id': 'req_8dd1c4cf8a7085dbc978110f7814e6f1',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'aa6a8246-a50e-42af-866b-ff822df2c6be',
  'x-sora-request-id': 'req_8dd1c4cf8a7085dbc978110f7814e6f1'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6d0df913881919fbd1bb6d290e733
🔍 Fetching Sora remix feed for post: s_68f63550b780819182f9c8f392a80c54 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f63550b780819182f9c8f392a80c54/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 85,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8270cc177fb0-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:04 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1277',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=u13oGY7npSA9bfiEwj80rhtxeE1_clYEU_3Kx.1oux0-1761026164625-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1281',
  'x-oai-request-id': 'req_846b72f1a8e72f32367ce51d6b3746e6',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ae9ecf23-2249-42a1-a9ec-f6ce63779783',
  'x-sora-request-id': 'req_846b72f1a8e72f32367ce51d6b3746e6'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f609ae8ba4819191d65301b0f4e1f8
🔍 Fetching Sora remix feed for post: s_68f5f15e1d6081919028eee6c801b0c3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5f15e1d6081919028eee6c801b0c3/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8271afaaca09-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:04 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1308',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=wc_uS1d3jwizWX706Qsr3kP1UksOsn3z9KvlfIwV7uU-1761026164789-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1312',
  'x-oai-request-id': 'req_ad25f80fbd8fcae3c639570ed099c75e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '969fa3fa-84c6-40f9-9533-7dae2c4939f7',
  'x-sora-request-id': 'req_ad25f80fbd8fcae3c639570ed099c75e'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f63550b780819182f9c8f392a80c54
🔍 Fetching Sora remix feed for post: s_68f6c5775480819189f381baa6f4cf00 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6c5775480819189f381baa6f4cf00/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e826b6dca233c-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:04 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '2424',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=pwkv3DcVmfQojab2w9u1_vCC9bd_lGqHqHb6YGYKTNs-1761026164958-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '2461',
  'x-oai-request-id': 'req_d35e87b5b6d887ab6f2fee57dfde20de',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd0d9fb6c-31e8-4257-ac9e-40290c3921b5',
  'x-sora-request-id': 'req_d35e87b5b6d887ab6f2fee57dfde20de'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5f08a22d08191866cf9be5e3e475d
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e827939327fb0-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:05 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '785',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=N72JLxCaFWwv3Bqkq_bi_CCpT_TKjaTULNdcBAj5ohE-1761026165475-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '789',
  'x-oai-request-id': 'req_541b8947f2410ca7bc416719227ccdb3',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7f02e697-c44f-434e-8867-6c8a5b950514',
  'x-sora-request-id': 'req_541b8947f2410ca7bc416719227ccdb3'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5f15e1d6081919028eee6c801b0c3
🔍 Fetching Sora remix feed for post: s_68f6618756488191a85dfd620a6127fb with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6618756488191a85dfd620a6127fb/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e827a7c57ca09-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:05 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1024',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=ik3KdERAldszdYufBwDfc9eteGYVd_iZqQWEp.LrtME-1761026165919-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1028',
  'x-oai-request-id': 'req_c53fc3a3024fc140d1de1973864ef34c',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '0ee96d06-def2-4ad9-84b1-fcce7f24d04b',
  'x-sora-request-id': 'req_c53fc3a3024fc140d1de1973864ef34c'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6c5775480819189f381baa6f4cf00
🔍 Fetching Sora remix feed for post: s_68f6c50a2a5c8191b06c3708e3afd515 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6c50a2a5c8191b06c3708e3afd515/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82815d60ca09-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:06 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '847',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=jFas5eFEynDzfY7i2.PDFFhZDdQwVw4NxalNid9xedw-1761026166844-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '850',
  'x-oai-request-id': 'req_ef63308f26222dbd076d9b0e72a68378',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '99476604-6053-44f1-b308-3a512450cead',
  'x-sora-request-id': 'req_ef63308f26222dbd076d9b0e72a68378'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6c50a2a5c8191b06c3708e3afd515
🔍 Fetching Sora remix feed for post: s_68f6d4a965408191a9f6826d9d75b0a4 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6d4a965408191a9f6826d9d75b0a4/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e827eda377fb0-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:07 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1503',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=hZJFfBjej.slSgTD_GhU8tUkW_.57dTjNcWqBAuKlZM-1761026167113-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1508',
  'x-oai-request-id': 'req_8e9c20c5a7ef6bb7b48896a0ea987c0b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '0d3449f9-a4c5-46be-bfc0-7057dac15837',
  'x-sora-request-id': 'req_8e9c20c5a7ef6bb7b48896a0ea987c0b'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6618756488191a85dfd620a6127fb
🔍 Fetching Sora remix feed for post: s_68f6ce5a19388191b2bd24c7df230a8d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6ce5a19388191b2bd24c7df230a8d/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82872d0eca09-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:07 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '813',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=pFXizE2OtOSjZc00ve8oZEiovixanvluF1tYdQIAnOI-1761026167736-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '817',
  'x-oai-request-id': 'req_cad74626f94519116c8fef6585f46d0d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'bc447e91-2023-436c-8adf-f6ddd3939cad',
  'x-sora-request-id': 'req_cad74626f94519116c8fef6585f46d0d'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6d4a965408191a9f6826d9d75b0a4
🔍 Fetching Sora remix feed for post: s_68f5d8e3562481918259b29642224f89 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5d8e3562481918259b29642224f89/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e828ced46ca09-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:08 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '743',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.1Zalozw.2kEfFXAmWIpJIrwmcnY44JTH2CmWSIea3c-1761026168585-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '746',
  'x-oai-request-id': 'req_35723c8e7621813bbbe221b5fc3d72f1',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '44b3317d-e9ca-4e6e-b51e-fa1d21595bb0',
  'x-sora-request-id': 'req_35723c8e7621813bbbe221b5fc3d72f1'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5d8e3562481918259b29642224f89
🔍 Fetching Sora remix feed for post: s_68f5d53cd4d081919ed1a6eff9d7659f with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5d53cd4d081919ed1a6eff9d7659f/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e828909a27fb0-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:08 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1753',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=DbQ7fkH5FsL3aXDCF5FzRVCSRPlMl1a_7oa343Ra_x8-1761026168982-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1757',
  'x-oai-request-id': 'req_355ddc8de4762fe226d9a9ecd6f6433e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '044d6344-6e1c-431e-8afb-ccf46170b91e',
  'x-sora-request-id': 'req_355ddc8de4762fe226d9a9ecd6f6433e'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6ce5a19388191b2bd24c7df230a8d
🔍 Fetching Sora remix feed for post: s_68f63fb075b881919fb03ac0b56eea47 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f63fb075b881919fb03ac0b56eea47/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82920bfdca09-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:09 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '937',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=adehxpqE9t6zb__jGF4qUf38gslQU37BxRTAEerTnX0-1761026169602-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '941',
  'x-oai-request-id': 'req_2ddeb587b41c454291b7f569800c36c0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e903d821-ebf9-49e2-8700-2dfa3dcbb929',
  'x-sora-request-id': 'req_2ddeb587b41c454291b7f569800c36c0'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5d53cd4d081919ed1a6eff9d7659f
🔍 Fetching Sora remix feed for post: s_68f63b63d43c8191a78e6a1b8ccfa982 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f63b63d43c8191a78e6a1b8ccfa982/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82949b297fb0-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1284',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.h1VRcTZLUa2rHuBEN9hzEXe4qv._VGErXx0cjg7Sww-1761026170365-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1288',
  'x-oai-request-id': 'req_bda852cc658a550a16b3ffa2a1e3111c',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5b36aea7-e9ea-492e-967b-b87ed6477562',
  'x-sora-request-id': 'req_bda852cc658a550a16b3ffa2a1e3111c'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f63fb075b881919fb03ac0b56eea47
🔍 Fetching Sora remix feed for post: s_68f67c149124819182c610e1e998fd45 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f67c149124819182c610e1e998fd45/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e829d49637fb0-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '159',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=pQJqbHtrDOM9R48awMVGIhCu57fPkJ4R1AygPqpMumE-1761026170622-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '163',
  'x-oai-request-id': 'req_094ea22d0bd940efdc56208d007ba187',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '89bf09e9-2cc4-4a67-83d5-0f1976863d82',
  'x-sora-request-id': 'req_094ea22d0bd940efdc56208d007ba187'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f67c149124819182c610e1e998fd45
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82988cfcca09-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1051',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=ibva1VrjNB0k3mwJm.QHr3k1Akm6cnuTNyRYu1VZxGY-1761026170758-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1054',
  'x-oai-request-id': 'req_ba1c2ddc87d600cfc90b0bf1b927003c',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '21e314be-8637-40c6-a773-1e16ef0263cf',
  'x-sora-request-id': 'req_ba1c2ddc87d600cfc90b0bf1b927003c'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f63b63d43c8191a78e6a1b8ccfa982
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 85,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching Sora remix feed for post: s_68f5821856708191af67150c20b0340a with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5821856708191af67150c20b0340a/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82d38b3b22f3-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:19 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '133',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=e88VYVPkYZpXpVe2rN.novtQmv_e7MBscpJxDcKSy_4-1761026179288-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '137',
  'x-oai-request-id': 'req_4d455381756912ed12564a2fb6f0d9d2',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '51700e37-9586-436e-856f-f705aab36dc6',
  'x-sora-request-id': 'req_4d455381756912ed12564a2fb6f0d9d2'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f5821856708191af67150c20b0340a
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
🔍 Fetching Sora remix feed for post: s_68f5733ab73881918801adabeed3d96c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5733ab73881918801adabeed3d96c/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching Sora remix feed for post: s_68f58af5ede08191b2b5440b9059f108 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f58af5ede08191b2b5440b9059f108/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f524b36c588191a645e8b7777b8690 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f524b36c588191a645e8b7777b8690/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f689ce2e3c8191b1997c2ace9cbad2 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f689ce2e3c8191b1997c2ace9cbad2/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82d78df122f3-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '966',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=7dXnxNhWrFGwCvAuFPM8kpH6aZoj73dfjeCy7oHCN8U-1761026180758-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '970',
  'x-oai-request-id': 'req_eea83a1a1c5f2bfc3bc8a25f4d618a69',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '4984fe7c-e5f7-4f35-a2a6-66de0e1be074',
  'x-sora-request-id': 'req_eea83a1a1c5f2bfc3bc8a25f4d618a69'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5733ab73881918801adabeed3d96c
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82dd2afd68d7-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:21 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '892',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=uKp7B81R8VqRRiTi8wTvm545NfYCJE8EPkjQw5i2v5Y-1761026181572-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '896',
  'x-oai-request-id': 'req_cac8c707908346852b5aee80c3d99f57',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '674ae491-fac2-404a-9366-05d96bbef57b',
  'x-sora-request-id': 'req_cac8c707908346852b5aee80c3d99f57'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f58af5ede08191b2b5440b9059f108
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82dd6fe8e7fe-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:21 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '928',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=VFeNskDnuP69qXI0hGWVrx.ytdQObnex5Ae3FhoSOqo-1761026181661-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '933',
  'x-oai-request-id': 'req_d807d0936ccf64cdff217a8fcfb40cdb',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '91182e62-75db-4d42-805f-0e4ca2ed00f9',
  'x-sora-request-id': 'req_d807d0936ccf64cdff217a8fcfb40cdb'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f524b36c588191a645e8b7777b8690
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e82dd98a1aca8-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:22 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1320',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=PnlhjRJDnzZlim57zwnU1MCRfpKhLM3AI66q8kAiJws-1761026182077-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1323',
  'x-oai-request-id': 'req_f46bf5a90f212d91102926660ba6a152',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '19a782fe-3874-4568-bea8-e55eb2f4d653',
  'x-sora-request-id': 'req_f46bf5a90f212d91102926660ba6a152'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f689ce2e3c8191b1997c2ace9cbad2
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 84,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 85,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Searching database for: goblins
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 11,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
✅ Found 50 results for query: "goblins"
📊 Top result: text_relevance=0.511, remix_score=0.000
🔍 Fetching Sora remix feed for post: s_68f70f30e8808191a41067594598b61a with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f70f30e8808191a41067594598b61a/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8332daa7003d-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:34 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '127',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=eHukMtT_i_o3Zs_lR2oKtzRSAswB9tG5vYzJtz7SuOQ-1761026194538-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '130',
  'x-oai-request-id': 'req_afb30f8ca55468e1cf218f0eae1b3433',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '3c0efc10-6092-48e8-ae66-7fea86b90521',
  'x-sora-request-id': 'req_afb30f8ca55468e1cf218f0eae1b3433'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f70f30e8808191a41067594598b61a
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching Sora remix feed for post: s_68f710af2fe4819193af75c1f4269e1a with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f710af2fe4819193af75c1f4269e1a/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e833f6c87003d-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:36 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '179',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=z6.xPq98Ygl6uzr9yLMhaYnUuTjZX0H0nH9GqH_kIlc-1761026196587-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '183',
  'x-oai-request-id': 'req_10e8d43286e59cfddfb9b64c27a25181',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '4359eaf0-4d42-4439-9d8e-b257cf862c1e',
  'x-sora-request-id': 'req_10e8d43286e59cfddfb9b64c27a25181'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f710af2fe4819193af75c1f4269e1a
🔍 Fetching Sora remix feed for post: s_68f7109f554081918dea2df8c4e2c7a6 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7109f554081918dea2df8c4e2c7a6/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83474f89003d-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:37 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '192',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Z5Yw4vDKfZDvymKs5lWH43uXfZoVtRDBajdX2N9osIM-1761026197855-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '196',
  'x-oai-request-id': 'req_7cfcf6d31f4d6bfdffba409fa1c63f1b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'dda9c255-6c41-9b63-ba8b-420e98d078ce',
  'x-sora-request-id': 'req_7cfcf6d31f4d6bfdffba409fa1c63f1b'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7109f554081918dea2df8c4e2c7a6
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 85,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Searching database for: goblins taking a bath
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 12,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
✅ Found 2 results for query: "goblins taking a bath"
📊 Top result: text_relevance=0.092, remix_score=0.000
🔍 Fetching Sora remix feed for post: s_68f71c48055081918b6e4635b087f9f3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f71c48055081918b6e4635b087f9f3/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e836edd7d22c7-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:44 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '137',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=IcHXTTaVr9Eu_4Uj4S3dxPrwET_FDKwsciFS9nf6Aww-1761026204134-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '140',
  'x-oai-request-id': 'req_37866adf739b3d275c36b9feae29b5db',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e30e4faa-30d5-4f85-9584-aa639526a300',
  'x-sora-request-id': 'req_37866adf739b3d275c36b9feae29b5db'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f71c48055081918b6e4635b087f9f3
🔍 Fetching Sora remix feed for post: s_68f7108d2b688191b1dc3a9fd6c4731e with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7108d2b688191b1dc3a9fd6c4731e/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83787a0522c7-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:45 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '151',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=XiQ5DFJ0J3OOwBxE3fSo5nD5ayE0AEt.pI0pMWANa8I-1761026205683-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '155',
  'x-oai-request-id': 'req_4b9642421bd9309cfebaea80400c0545',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '6d94e318-3b0c-4cd4-b3da-e33363dfd732',
  'x-sora-request-id': 'req_4b9642421bd9309cfebaea80400c0545'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7108d2b688191b1dc3a9fd6c4731e
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 95,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
🔍 Fetching latest posts from database: { limit: 20, offset: 0 }
✅ Found 20 latest posts from database
🔍 Fetching Sora remix feed for post: s_68f7208d82a4819194fd3052b5717886 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208d82a4819194fd3052b5717886/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7208d69748191bd22e174bf254900 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208d69748191bd22e174bf254900/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7208d82a4819194fd3052b5717886 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208d82a4819194fd3052b5717886/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83a39f491041-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '122',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Pd_lUzEW2RhewxzhTQD44ojIEQgAZOvFO6uMc0Q5sts-1761026212552-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '125',
  'x-oai-request-id': 'req_6a4ee034a363b5faa386c02ae09d1fe9',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '67993fc6-870c-41d9-90d3-04a650766c8d',
  'x-sora-request-id': 'req_6a4ee034a363b5faa386c02ae09d1fe9'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208d82a4819194fd3052b5717886
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83a398f8e283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '164',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=G1XZaXeYh9.7J2OUu4zcjVW46lL.t2o3gZd.HGGZGbg-1761026212619-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '168',
  'x-oai-request-id': 'req_0640f7c6ef27fa7ba0655669d2fe8c3e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd736c344-7812-4749-9c75-171abf1ccae9',
  'x-sora-request-id': 'req_0640f7c6ef27fa7ba0655669d2fe8c3e'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208d69748191bd22e174bf254900
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83a39a58eb5d-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '166',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=4CiUkRe_6R3y_GhU5kUWvrbdwiBznZVmObZSP.ejU_Q-1761026212622-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '169',
  'x-oai-request-id': 'req_32c2965d6dbcc15f979a5a6b4d00f9b1',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '2daa817f-85f5-41f5-9e54-3101e073b331',
  'x-sora-request-id': 'req_32c2965d6dbcc15f979a5a6b4d00f9b1'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208d82a4819194fd3052b5717886
🔍 Fetching Sora remix feed for post: s_68f7208be1348191a76c8e27f455ec78 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208be1348191a76c8e27f455ec78/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7208ba68c81918cf614cc51ab8cfa with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208ba68c81918cf614cc51ab8cfa/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83a5c8581041-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:52 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '128',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=ybgS.WbbTqft9oIRwlK7zIlAepDl5BmkDBAjMhL4jfY-1761026212911-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '131',
  'x-oai-request-id': 'req_8a6b8271efdb000d2c680f3a9d63755d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'eb9401aa-8e6d-415b-a785-2105e97b4004',
  'x-sora-request-id': 'req_8a6b8271efdb000d2c680f3a9d63755d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208be1348191a76c8e27f455ec78
🔍 Fetching Sora remix feed for post: s_68f7208b83948191b00000fe718a2c45 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208b83948191b00000fe718a2c45/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83a66a33e283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '161',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=afRr9KzdtsIpLOvtSLGaAK5L.J9RE8YTVMVUzc3b1N8-1761026213061-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '165',
  'x-oai-request-id': 'req_740ad5cf2fed3828b7b6bb3616999842',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9803dc1d-1df0-4024-a0e1-cb498731c0f9',
  'x-sora-request-id': 'req_740ad5cf2fed3828b7b6bb3616999842'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208ba68c81918cf614cc51ab8cfa
🔍 Fetching Sora remix feed for post: s_68f7208afdb48191a44f6f5a2befcac2 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208afdb48191a44f6f5a2befcac2/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83a729301041-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '169',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=UiPGjVv2Jo6XO0qVaa_CqeLNXvztljw8asOkucswq4w-1761026213179-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '175',
  'x-oai-request-id': 'req_e3b2354adfa04304219fd5439df9fe6d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '3c14fa4f-4982-42af-90ef-6f8a39531455',
  'x-sora-request-id': 'req_e3b2354adfa04304219fd5439df9fe6d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208b83948191b00000fe718a2c45
🔍 Fetching Sora remix feed for post: s_68f7208adfb4819181c88d421a11fde7 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208adfb4819181c88d421a11fde7/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83a85b46e283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '151',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=BCGcl8gRPLhIf9GDseXOxGawLQfnfDbdfZcPHMWu9pM-1761026213351-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '155',
  'x-oai-request-id': 'req_bfc9fbc4aec9053e05b4852e7270d7d2',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5d5d3d6d-106c-44fe-b1e7-c7b3dadb3066',
  'x-sora-request-id': 'req_bfc9fbc4aec9053e05b4852e7270d7d2'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208afdb48191a44f6f5a2befcac2
🔍 Fetching Sora remix feed for post: s_68f7208acebc819186d7288e3dd893ab with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208acebc819186d7288e3dd893ab/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83a9abd2e283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '153',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Drn7N3NmOqU4_MrAd7xPEWhZAXNkzAyi8zTwwasNqYM-1761026213566-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '156',
  'x-oai-request-id': 'req_bd6626c82b463ab4b570a83ff184ac71',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '2e0d08c5-0f9e-4891-9222-702ac9b5c302',
  'x-sora-request-id': 'req_bd6626c82b463ab4b570a83ff184ac71'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208acebc819186d7288e3dd893ab
🔍 Fetching Sora remix feed for post: s_68f7208a6dec8191953a4e2e8f105066 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208a6dec8191953a4e2e8f105066/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83ab0c59e283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '140',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=bS8mym44s12t1d6CLyXTv9IsAhiZ2AmKu1X.CejmeJ8-1761026213771-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '143',
  'x-oai-request-id': 'req_0b3e0171432b368ffe65721afd0f8ed0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '2c1b675d-abe0-4014-9e79-c07fd831c74c',
  'x-sora-request-id': 'req_0b3e0171432b368ffe65721afd0f8ed0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208a6dec8191953a4e2e8f105066
🔍 Fetching Sora remix feed for post: s_68f7208a15548191b03aa558b8fab817 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208a15548191b03aa558b8fab817/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83ac6ce1e283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:53 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '143',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.5wKLpxZYUL0rb..aKetaU.1lsAtZXJjRO_6uqGjkNE-1761026213990-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '149',
  'x-oai-request-id': 'req_4f3f2ddc757cf289d3bc022aa4ccfe56',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '385499ba-f238-40f4-9904-31c995a3b37d',
  'x-sora-request-id': 'req_4f3f2ddc757cf289d3bc022aa4ccfe56'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208a15548191b03aa558b8fab817
🔍 Fetching Sora remix feed for post: s_68f72089f34481918b828cff4d6789ef with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72089f34481918b828cff4d6789ef/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83adcd5be283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:54 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=h7jbK3wLljAvW3Z_Z5EMSOgbc5W0bR_bgOnhM79XsWk-1761026214195-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '132',
  'x-oai-request-id': 'req_c8f7559eb78c4f6b6e317fb2626bd481',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '3b68e7f8-395f-4965-8efb-1c3f2c599fb0',
  'x-sora-request-id': 'req_c8f7559eb78c4f6b6e317fb2626bd481'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72089f34481918b828cff4d6789ef
🔍 Fetching Sora remix feed for post: s_68f72089b5f881919518b281e45cb5d3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72089b5f881919518b281e45cb5d3/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83af2de8e283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:54 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '155',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=b53tS61J6FW0mjOf9Pu6DFMBnrj8VlZ.hxU9Lo.LPjg-1761026214450-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '158',
  'x-oai-request-id': 'req_466c3a8428adc44d61818ce673e32845',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '644b2ef4-7884-4e52-969f-731ad5a3490e',
  'x-sora-request-id': 'req_466c3a8428adc44d61818ce673e32845'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72089b5f881919518b281e45cb5d3
🔍 Fetching Sora remix feed for post: s_68f720897f248191b3651d3ff766a86b with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720897f248191b3651d3ff766a86b/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83b12f10e283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:54 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '125',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Sutmh1iUElUOKRq5QDD_qIZdjRuBo08duYOemqkZLoI-1761026214787-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '128',
  'x-oai-request-id': 'req_26d228ba77641a8579631915c4c7c8e3',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'fbaf80c3-28ca-4b77-9f0d-bb95069b84d0',
  'x-sora-request-id': 'req_26d228ba77641a8579631915c4c7c8e3'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720897f248191b3651d3ff766a86b
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83a90a651041-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:54 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '164',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=YYE1QOVGD.f6HuclPk6l8c947QsGEFBV30yBtwMVGEA-1761026214792-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1495',
  'x-oai-request-id': 'req_fede072e329f0c538822bd8b8abce950',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '4271bfa9-ecfe-4be6-95eb-d69644c20611',
  'x-sora-request-id': 'req_fede072e329f0c538822bd8b8abce950'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208adfb4819181c88d421a11fde7
🔍 Fetching Sora remix feed for post: s_68f7208919508191825e4876f7da8232 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208919508191825e4876f7da8232/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720891b98819183a13e72f148bafa with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720891b98819183a13e72f148bafa/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83b338151041-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:55 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '158',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=xP5Yxi6Xk9sYn29Ok_roUfVhHMJS1hzp2JmSMTpFLkI-1761026215098-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '161',
  'x-oai-request-id': 'req_f2f6ba841ce9994438c8decdb02a2b90',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '0b1e9047-dd9e-4383-ba58-130614a9d343',
  'x-sora-request-id': 'req_f2f6ba841ce9994438c8decdb02a2b90'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208919508191825e4876f7da8232
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83b33852e283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:55 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '162',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=IBzRPdtOVTTGtmIBeIq49z4hqEL1Fo9tiVQUWHi8nJ4-1761026215100-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '166',
  'x-oai-request-id': 'req_cd62b78252a76ebab7e8387494f32785',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e21a44e7-b0e1-46a1-993a-02a0ee71ef7a',
  'x-sora-request-id': 'req_cd62b78252a76ebab7e8387494f32785'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720891b98819183a13e72f148bafa
🔍 Fetching Sora remix feed for post: s_68f720890df08191a1094aff5afd1ab6 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720890df08191a1094aff5afd1ab6/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7208915ac8191b58e07271bd984da with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7208915ac8191b58e07271bd984da/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83b5292f1041-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:55 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '112',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=uuoozYtYmfgm1CkEFI6._bKwyYbuUNX7gvpIaAHUO_g-1761026215360-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '115',
  'x-oai-request-id': 'req_190030996a89e2b6243a29c9ad635f79',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '46ad8cd0-201b-4cfa-8a93-bdc3ec157c7a',
  'x-sora-request-id': 'req_190030996a89e2b6243a29c9ad635f79'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720890df08191a1094aff5afd1ab6
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83b5394be283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:55 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '147',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=rPeefNlC7.vnvJRdK0P2gYq6BtujXKtZIgrgSqcrxFg-1761026215403-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '150',
  'x-oai-request-id': 'req_25173fe81dffa25d7661560c2370dc0b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '77fab63c-aceb-452b-9eea-448285415350',
  'x-sora-request-id': 'req_25173fe81dffa25d7661560c2370dc0b'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7208915ac8191b58e07271bd984da
🔍 Fetching Sora remix feed for post: s_68f72088fecc8191a71baa9b413d1bc9 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72088fecc8191a71baa9b413d1bc9/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72088899c81918c4b32743efcfc38 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72088899c81918c4b32743efcfc38/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83b689ee1041-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:55 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '126',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.A7YDK1dJdnoeUNmvV.KCMoqTTtD_3Q2O5xNHtbfbkI-1761026215591-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '129',
  'x-oai-request-id': 'req_69e17d00646aae01bb5b3d14ebc66dca',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '749f3e93-3550-4883-93a7-485c19df1c03',
  'x-sora-request-id': 'req_69e17d00646aae01bb5b3d14ebc66dca'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72088fecc8191a71baa9b413d1bc9
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83b689fce283-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:55 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '128',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=se2hRQXVlppo0cIKq14KP7YfEkni_sI129DceNPUrUg-1761026215593-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '131',
  'x-oai-request-id': 'req_2ec1dc2f03aa910ca3400ae8f8b92894',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '740d075c-b4ee-4f3f-96fa-a4a86858893d',
  'x-sora-request-id': 'req_2ec1dc2f03aa910ca3400ae8f8b92894'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72088899c81918c4b32743efcfc38
🔍 Fetching Sora remix feed for post: s_68f720885d2081919b6fa6934aa1cbc4 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720885d2081919b6fa6934aa1cbc4/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e83b7ea901041-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:56:55 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '130',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=BbrIm9KoD12oYqd1kgu2PKCogWxNhkgGwxKMg2NZ9O0-1761026215811-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '134',
  'x-oai-request-id': 'req_42aebb5a6d4092852d3ea8e140c652c1',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '66b34fab-782a-492a-beaf-735e0c23c9e1',
  'x-sora-request-id': 'req_42aebb5a6d4092852d3ea8e140c652c1'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720885d2081919b6fa6934aa1cbc4
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 12,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 20,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 12,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 85,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 84,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching latest posts from database: { limit: 20, offset: 20 }
✅ Found 20 latest posts from database
🔍 Fetching Sora remix feed for post: s_68f721022ff08191b36fe07875c366f8 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721022ff08191b36fe07875c366f8/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721022ed4819181cc1b38a24df40d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721022ed4819181cc1b38a24df40d/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721022ff08191b36fe07875c366f8 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721022ff08191b36fe07875c366f8/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721022ed4819181cc1b38a24df40d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721022ed4819181cc1b38a24df40d/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72101e77c81918ec7bc82a2327f75 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72101e77c81918ec7bc82a2327f75/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72101b7148191ab11c97bb0fc141a with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72101b7148191ab11c97bb0fc141a/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866b889ad8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '125',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=jxbGDqww4kydlTpnJ0jRZ5ecPdZwV2JUtq4Wjelhm3o-1761026326476-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '128',
  'x-oai-request-id': 'req_860a24c1c04e1d639cc6f1d0cf2b7ae4',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b67032c2-097d-41e3-9ac2-0a52df31ce60',
  'x-sora-request-id': 'req_860a24c1c04e1d639cc6f1d0cf2b7ae4'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721022ed4819181cc1b38a24df40d
🔍 Fetching Sora remix feed for post: s_68f721017e34819181e8b061b05be660 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721017e34819181e8b061b05be660/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866b8bf70ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '152',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=wq7hRvvK4Npz7MfZf4xIwr9LWQq56JPLBH8wtBbTnYI-1761026326498-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '156',
  'x-oai-request-id': 'req_0a774321041868d27a08a2fca4cc3f0e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ddba5f4f-d554-4155-887b-2ceb98baac09',
  'x-sora-request-id': 'req_0a774321041868d27a08a2fca4cc3f0e'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721022ff08191b36fe07875c366f8
🔍 Fetching Sora remix feed for post: s_68f7210118c481919f1bcb847b367a6f with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7210118c481919f1bcb847b367a6f/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866c9fffd130-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '128',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=dB7Xtut3IVXo3NJTlYIvmCtNl7AyGbwa4VVfEtpgVxs-1761026326639-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '132',
  'x-oai-request-id': 'req_d07c431a7ea4c8d6c7cde155d417d698',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'bd8daea7-0c9d-4713-9d93-8928a2db3869',
  'x-sora-request-id': 'req_d07c431a7ea4c8d6c7cde155d417d698'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721022ed4819181cc1b38a24df40d
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866caa1ed8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '126',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=J5a_ultOKLgAdqQi_ShhPodSmCmk9fJPgf0dTHHmewE-1761026326647-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '129',
  'x-oai-request-id': 'req_9bca03a50e8e91f1cd844726db1b671e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b993f003-371b-46ba-86b5-1ba33f1de6df',
  'x-sora-request-id': 'req_9bca03a50e8e91f1cd844726db1b671e'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721017e34819181e8b061b05be660
🔍 Fetching Sora remix feed for post: s_68f72100c8c88191bb03e846e4a34ac8 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72100c8c88191bb03e846e4a34ac8/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721006e448191ae1d87a0602e0695 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721006e448191ae1d87a0602e0695/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866c8fabcc6e-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '143',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=owS9PkWFhsuzW2HUjnGy4BCkNPwn9.g5Uvqd8p1mLec-1761026326649-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '147',
  'x-oai-request-id': 'req_3ada4ed2f221401aaa67004f8ae2e370',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '86b5fcb8-b539-4e81-bada-956f05dd133e',
  'x-sora-request-id': 'req_3ada4ed2f221401aaa67004f8ae2e370'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721022ff08191b36fe07875c366f8
🔍 Fetching Sora remix feed for post: s_68f72100685481919a6713a93caa68ba with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72100685481919a6713a93caa68ba/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866caedd1236-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '112',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=q5GJ9jWCTGoe6686DWJGV8AlwRZtVnrUl3.d6iCVkaM-1761026326654-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '115',
  'x-oai-request-id': 'req_5d4d6fd3c116ebec472f7856b637f8ee',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '970fc251-33cc-4228-970b-a9b4158cc347',
  'x-sora-request-id': 'req_5d4d6fd3c116ebec472f7856b637f8ee'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72101b7148191ab11c97bb0fc141a
🔍 Fetching Sora remix feed for post: s_68f7210060d08191b1e8ddb94412e64c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7210060d08191b1e8ddb94412e64c/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866cae28e148-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '134',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=7vQ.7vvqcqeqibK13mccb9ra4yuERnzk2QclkiLtfBs-1761026326664-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '138',
  'x-oai-request-id': 'req_0387bf2fb8c6fea5e8c2e257d2de01b7',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '8d6bf174-24f6-44e0-a68a-6c97db6467d4',
  'x-sora-request-id': 'req_0387bf2fb8c6fea5e8c2e257d2de01b7'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72101e77c81918ec7bc82a2327f75
🔍 Fetching Sora remix feed for post: s_68f721004a388191838aa0cc436eaa37 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721004a388191838aa0cc436eaa37/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866ccd580ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '141',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=j4dk7obrhGCXYfLdyjDhfhRuNJKj71Oc8tZcBC_Zs7Q-1761026326688-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '145',
  'x-oai-request-id': 'req_fbf8e94d9efc24c5e9f2aac9359f87d2',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '841b3e4e-c810-40af-af31-c7d5f9292e89',
  'x-sora-request-id': 'req_fbf8e94d9efc24c5e9f2aac9359f87d2'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7210118c481919f1bcb847b367a6f
🔍 Fetching Sora remix feed for post: s_68f72100365c8191873a56bcd1e4da89 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72100365c8191873a56bcd1e4da89/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866db960d130-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '120',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=3g9nJd4u30aE_EGt76ZB4ELcK2D1zSK1KpV4N9ZfJvo-1761026326808-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '124',
  'x-oai-request-id': 'req_44f1644db917d9c3ae6e1c12fbd92372',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b66e2563-e115-4ab6-933b-3f9ea1f1f6d0',
  'x-sora-request-id': 'req_44f1644db917d9c3ae6e1c12fbd92372'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721006e448191ae1d87a0602e0695
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866db932cc6e-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '121',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=NJ..GcNp9e9bggkmed2z2aSsqy4mJgP8F2vDei04Eec-1761026326819-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '125',
  'x-oai-request-id': 'req_0e746a2fdc510d6d7e8635a543e2585d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'db66563f-d9ba-4d65-832d-57e6effb1086',
  'x-sora-request-id': 'req_0e746a2fdc510d6d7e8635a543e2585d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72100685481919a6713a93caa68ba
🔍 Fetching Sora remix feed for post: s_68f7210030d881918156dbb5c57b60c5 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7210030d881918156dbb5c57b60c5/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7210017308191b9c1fb3bd1a386b2 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7210017308191b9c1fb3bd1a386b2/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866dbf921236-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '138',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=gCY9xa5pxTJVCa8DH5j4sugEeb8VRFFjoTsC1U54iO4-1761026326841-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '143',
  'x-oai-request-id': 'req_31d5e5b2a6a28d5f1fa01fd51672f8fe',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '0f26ee45-bbd6-4ad3-a145-586fd045e1ac',
  'x-sora-request-id': 'req_31d5e5b2a6a28d5f1fa01fd51672f8fe'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7210060d08191b1e8ddb94412e64c
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866ddedae148-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '158',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Ltw25fSvhpqC8MEBRlmjlrYFAtoS5W1Tu9hDVPBmFOc-1761026326878-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '161',
  'x-oai-request-id': 'req_3dd0edd57b00a093e6f95cf618782764',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'f71d05af-2c75-411f-9f36-43cf972cefd9',
  'x-sora-request-id': 'req_3dd0edd57b00a093e6f95cf618782764'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721004a388191838aa0cc436eaa37
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866e1ece0ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '132',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Axliswqh52SHZZhoskpxGxchrFb0_F7aqicLEAPxlSc-1761026326882-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '136',
  'x-oai-request-id': 'req_7b88a4956566883fe3d5c0cae9281ca4',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '66754bba-f3a6-4386-aae2-0f4a30fa6cab',
  'x-sora-request-id': 'req_7b88a4956566883fe3d5c0cae9281ca4'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72100365c8191873a56bcd1e4da89
🔍 Fetching Sora remix feed for post: s_68f7210017248191a3afde57ba6e9ed5 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7210017248191a3afde57ba6e9ed5/remix_feed?limit=20
🔑 Bearer token present: true
✅ Cache hit for remix feed: s_68f72101e77c81918ec7bc82a2327f75
🔍 Fetching Sora remix feed for post: s_68f72101c4988191ae4443762106b24e with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72101c4988191ae4443762106b24e/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fff0008191ad92d8ea30d14c91 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fff0008191ad92d8ea30d14c91/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866eeaaed130-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '161',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=pXuZJfoMPGUfZ.8TUuWF0XdnpNnGxamLiiKMu5Rpbrk-1761026327039-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '165',
  'x-oai-request-id': 'req_077a4f9cfcc2d0859a08034c62a534b4',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '56a2a916-1a2f-4259-80fb-1c5e0abd6083',
  'x-sora-request-id': 'req_077a4f9cfcc2d0859a08034c62a534b4'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7210017308191b9c1fb3bd1a386b2
🔍 Fetching latest posts from database: { limit: 20, offset: 40 }
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866dbb72d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '320',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Fuk75elyOLTcj8pGup8SNFUZqvGj5IriBRuyaPSEG.g-1761026327046-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '359',
  'x-oai-request-id': 'req_230efd82d436a98bbdb5a7376a3895f5',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ce10d237-9d28-4ece-9715-ff2f6388ecdd',
  'x-sora-request-id': 'req_230efd82d436a98bbdb5a7376a3895f5'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72100c8c88191bb03e846e4a34ac8
✅ Found 20 latest posts from database
🔍 Fetching Sora remix feed for post: s_68f720ffba2481919e8cb6bb33e8b20e with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ffba2481919e8cb6bb33e8b20e/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720ffadd081918ad1ceea7f77825d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ffadd081918ad1ceea7f77825d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866f4fbfe148-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '134',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=njfaPF1L43xbq4s5wloQjROgj_w0d11IqA6urC4DvBk-1761026327083-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '141',
  'x-oai-request-id': 'req_dea160c5102e70a27f5cc32ecbb8fb43',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5a075fe4-fafb-40cc-bde8-e70a2710782f',
  'x-sora-request-id': 'req_dea160c5102e70a27f5cc32ecbb8fb43'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72101c4988191ae4443762106b24e
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866f482f0ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '170',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=dh9A60mY98vjYls1jXNxfdb_vjX1_k5y74eAisFzTWY-1761026327112-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '174',
  'x-oai-request-id': 'req_42e7a579b8197b9d64aae2962a63755d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '6f600142-d735-4129-a750-bad13f80e4e6',
  'x-sora-request-id': 'req_42e7a579b8197b9d64aae2962a63755d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7210017248191a3afde57ba6e9ed5
🔍 Fetching Sora remix feed for post: s_68f720ff57248191b3f8af15a88be720 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ff57248191b3f8af15a88be720/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720ff455881919a9b2ad5b6caa518 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ff455881919a9b2ad5b6caa518/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86703eaad8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '147',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=x.yQf7GZHU8Iwl1tVOs8CZHVxPQLQdXqrzr39DFYfnk-1761026327242-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '151',
  'x-oai-request-id': 'req_0480069c65cdad91f97962eaddcff8c9',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b2a67462-7667-4297-abd1-5b7bbd0df49f',
  'x-sora-request-id': 'req_0480069c65cdad91f97962eaddcff8c9'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ffba2481919e8cb6bb33e8b20e
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86709851e148-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '118',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=6JjM_o70OQ02SLlpKL00IWlRAq5XRvLl4WomY1JoTF4-1761026327277-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '121',
  'x-oai-request-id': 'req_98188070086866ba4d38d8f52f09f9b2',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '6b50ca97-8395-47af-acfd-20ffe4c0d054',
  'x-sora-request-id': 'req_98188070086866ba4d38d8f52f09f9b2'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ff57248191b3f8af15a88be720
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86704c93d130-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '168',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=kP3vv4MTBPGAdztzOH8zveHKHsBRiS4502dX_M0p6No-1761026327280-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '172',
  'x-oai-request-id': 'req_ed7291142c12ca98fc509f64dfe4ffc0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b00f2d61-c978-47c6-b9b5-33f093ead013',
  'x-sora-request-id': 'req_ed7291142c12ca98fc509f64dfe4ffc0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ffadd081918ad1ceea7f77825d
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86713acf0ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '132',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=oFWguk67PBE1DdUFF1yBUysaGs2x9tRF830QDDhd4go-1761026327386-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '136',
  'x-oai-request-id': 'req_ef63308f26222dbd076d9b0e72a68378',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'f9fd6ab6-a77f-4763-a176-279ed929575a',
  'x-sora-request-id': 'req_ef63308f26222dbd076d9b0e72a68378'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ff455881919a9b2ad5b6caa518
🔍 Fetching Sora remix feed for post: s_68f720ff2e8c8191adb22deefa661113 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ff2e8c8191adb22deefa661113/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720ff17408191bea258516df49054 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ff17408191bea258516df49054/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720ff2e8c8191adb22deefa661113 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ff2e8c8191adb22deefa661113/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720ff17408191bea258516df49054 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ff17408191bea258516df49054/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86732ad3d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '138',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=eb3LHXFFQfI.F1MNU4eLpCet7LuOFrbxVdygo6HXdS4-1761026327700-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '142',
  'x-oai-request-id': 'req_5a1569e5616a1e156742aa51a5c2453f',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e6ff434d-536b-462e-b722-7bcac24c47a9',
  'x-sora-request-id': 'req_5a1569e5616a1e156742aa51a5c2453f'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ff17408191bea258516df49054
🔍 Fetching Sora remix feed for post: s_68f720ff001081918b4abaf57ab02870 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ff001081918b4abaf57ab02870/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86731d620ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '163',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=DGDNLXltU0A7S1etoXxmyilN48GH79HlpxcJQRExnuc-1761026327725-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '167',
  'x-oai-request-id': 'req_82a66968306989484b3ca20de6ab8644',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'c90ae8dc-f236-4b2e-91e0-f33d7ebe329e',
  'x-sora-request-id': 'req_82a66968306989484b3ca20de6ab8644'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ff2e8c8191adb22deefa661113
🔍 Fetching Sora remix feed for post: s_68f720feeaa081919179e0ea89cc1daa with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720feeaa081919179e0ea89cc1daa/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866f487e1236-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '868',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=yVyN5zURUI_y2ZuFTTV_n41ENOFc6O35fvUMOkYGCtg-1761026327819-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '871',
  'x-oai-request-id': 'req_fefe298442b00a359dc97c9de964aee7',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '8d467da7-0f06-4bc7-a207-9f3b4abde7ea',
  'x-sora-request-id': 'req_fefe298442b00a359dc97c9de964aee7'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f720fff0008191ad92d8ea30d14c91
🔍 Fetching Sora remix feed for post: s_68f720fe9ef48191bb1b080e57bdfe7a with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fe9ef48191bb1b080e57bdfe7a/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8673d912d130-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '156',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=kiBgn2.e9ydAU86RAjWz.qV7Lwp1KpTCvtvh37i6PWw-1761026327837-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '160',
  'x-oai-request-id': 'req_9d6feae5d657e3a305b4e80e9bd7c042',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'cbed2eb3-619f-41d7-a959-d8b64d1acd8a',
  'x-sora-request-id': 'req_9d6feae5d657e3a305b4e80e9bd7c042'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ff2e8c8191adb22deefa661113
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 10,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8673e9ede148-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '190',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=icmAZmesjCqGLyImQwoUQmEyCdFzHUMByfwRkK9KPVs-1761026327879-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '197',
  'x-oai-request-id': 'req_8dbecf846ec5d0a314a95593293a20e7',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'bef530d8-cc41-496a-af17-252df81a843d',
  'x-sora-request-id': 'req_8dbecf846ec5d0a314a95593293a20e7'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ff17408191bea258516df49054
🔍 Fetching Sora remix feed for post: s_68f720fe8638819186ed53d1468bdec5 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fe8638819186ed53d1468bdec5/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86747f320ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '139',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=8OG5cwY58g3H6t7QxB3qO1xYhiudrHqJ1eRMqLR9HKE-1761026327919-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '143',
  'x-oai-request-id': 'req_78db2f24d227c179b238c81f2b4e1216',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9d90dc34-bac0-41a5-964f-812be13396ab',
  'x-sora-request-id': 'req_78db2f24d227c179b238c81f2b4e1216'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720feeaa081919179e0ea89cc1daa
🔍 Fetching Sora remix feed for post: s_68f720fe82b48191b3b971588c45e79d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fe82b48191b3b971588c45e79d/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching Sora remix feed for post: s_68f720ff001081918b4abaf57ab02870 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720ff001081918b4abaf57ab02870/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e866edac3cc6e-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1234',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=v4tNnYX14ap_GaKpQiiWCGZtfe4a6DGzSvJiNnwbaMs-1761026328110-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1239',
  'x-oai-request-id': 'req_65ee1f110b26d0bd67475361dd4315ad',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'bca90e3e-c1c4-42cc-99d9-e6fc2af24cb2',
  'x-sora-request-id': 'req_65ee1f110b26d0bd67475361dd4315ad'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f7210030d881918156dbb5c57b60c5
✅ Cache hit for remix feed: s_68f720feeaa081919179e0ea89cc1daa
🔍 Fetching Sora remix feed for post: s_68f720fe60f48191aef7a905d5b14c5b with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fe60f48191aef7a905d5b14c5b/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8675c8c10ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '163',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=nC2F4rgCamsNi6lMsloQyuQpHfwHJc8hWGchLqqRpeE-1761026328146-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '166',
  'x-oai-request-id': 'req_330c8c0c5b584e349136b16c0813ace5',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '69820b9e-612f-42e4-ace8-4e80591b9208',
  'x-sora-request-id': 'req_330c8c0c5b584e349136b16c0813ace5'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fe82b48191b3b971588c45e79d
🔍 Fetching Sora remix feed for post: s_68f720fe2d5c819189ac85768daa7c48 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fe2d5c819189ac85768daa7c48/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86761ae7e148-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '115',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=1omCSvveJZgS.WY79V602H1DqUxdpp2XRP4eaLXtv3U-1761026328152-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '119',
  'x-oai-request-id': 'req_9310719bd3ac62be9c57dba37e52e0be',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '215a69b6-d46b-4b61-a03a-c3829fca52ab',
  'x-sora-request-id': 'req_9310719bd3ac62be9c57dba37e52e0be'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ff001081918b4abaf57ab02870
🔍 Fetching Sora remix feed for post: s_68f720fe13d4819199a04fae37a1b707 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fe13d4819199a04fae37a1b707/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86744c6dd8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '419',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=VZbHVRCDM442hLgjR7KGEkV0WHhXlnZL0TsEO_1wbmw-1761026328196-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '455',
  'x-oai-request-id': 'req_6423c17fc16fe156406218affb8424a9',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '49fc0df0-e35a-4ae6-9af8-7529b32686d5',
  'x-sora-request-id': 'req_6423c17fc16fe156406218affb8424a9'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720ff001081918b4abaf57ab02870
🔍 Fetching Sora remix feed for post: s_68f720fdfee08191885f86bcbff2936c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fdfee08191885f86bcbff2936c/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86770d46cc6e-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '121',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=dRm3niasToGp8lzseID4Vq4rH7aX1rTgDqaGg2aBVBM-1761026328301-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '124',
  'x-oai-request-id': 'req_1101cf9798d948639d08805d5f35d88d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b9741e79-fe92-4583-a7b0-40428d6bcaf4',
  'x-sora-request-id': 'req_1101cf9798d948639d08805d5f35d88d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fe60f48191aef7a905d5b14c5b
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86771a220ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '121',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=G9OwQgdPcY.AqNqdS35cLt7NWTfUUb83uxnXIWewBIg-1761026328311-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '126',
  'x-oai-request-id': 'req_8dbecf846ec5d0a314a95593293a20e7',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd5f51024-a4c7-4b3a-b01b-3aebbcd4ff2d',
  'x-sora-request-id': 'req_8dbecf846ec5d0a314a95593293a20e7'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fe2d5c819189ac85768daa7c48
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86772b7ae148-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '123',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=ohDvJhYde2pV.IhpjQVOGMg50cGj86OmU_8bMWCSRQ4-1761026328332-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '127',
  'x-oai-request-id': 'req_c967926441cfc5c9ed68102bef33e2b7',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '289c3bc7-e5a3-40b5-be4f-977cb90a257f',
  'x-sora-request-id': 'req_c967926441cfc5c9ed68102bef33e2b7'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fe13d4819199a04fae37a1b707
🔍 Fetching Sora remix feed for post: s_68f720fdf9448191a72f06420a7ee67a with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fdf9448191a72f06420a7ee67a/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fde604819186508a12c0de5d88 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fde604819186508a12c0de5d88/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867768cbd8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '118',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Q44n4STmd0jvchQNJBxb9_UZRnNWcWCW38lMZ.vlFrY-1761026328374-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '121',
  'x-oai-request-id': 'req_a7126b8c46fdab1cbaa88358092deb10',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '1976d558-2354-4231-862d-e1dcec40ea37',
  'x-sora-request-id': 'req_a7126b8c46fdab1cbaa88358092deb10'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fdfee08191885f86bcbff2936c
🔍 Fetching Sora remix feed for post: s_68f720fde5a88191a426b62ab5c52b63 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fde5a88191a426b62ab5c52b63/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86784b500ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '128',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=S9tsxgg1T_R94Mamw5Bh0zF_Dg_SYBgyLfDnYllhfW4-1761026328514-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '132',
  'x-oai-request-id': 'req_a3594324cb3d8017d46d22892d7630d7',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '3d45a86c-9945-46e9-9b44-422241525d0d',
  'x-sora-request-id': 'req_a3594324cb3d8017d46d22892d7630d7'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fdf9448191a72f06420a7ee67a
🔍 Fetching latest posts from database: { limit: 20, offset: 60 }
✅ Found 20 latest posts from database
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86787f5acc6e-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '161',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=lfve7kY52nyHJB8t3B8dpgNIe4mN5g1HDRN0jtnz8Yg-1761026328574-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '164',
  'x-oai-request-id': 'req_d9c9f409f950ad468011fc94fc235f8d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '548277ae-6eaa-438f-862c-1006c5d9954c',
  'x-sora-request-id': 'req_d9c9f409f950ad468011fc94fc235f8d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fde604819186508a12c0de5d88
🔍 Fetching Sora remix feed for post: s_68f720fda9c081918a6f4fdd050886a2 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fda9c081918a6f4fdd050886a2/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching latest posts from database: { limit: 20, offset: 60 }
🔍 Fetching latest posts from database: { limit: 20, offset: 60 }
✅ Found 20 latest posts from database
✅ Found 20 latest posts from database
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8678dab3d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=757P9FBqf819R_6ydtMdtS8xww.O11yxPyJCD36OiDE-1761026328604-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_3e4bee41397e6e1fae0291e67ace5f56',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '80a84012-6101-99b7-b7a5-a3704b27d0fb',
  'x-sora-request-id': 'req_3e4bee41397e6e1fae0291e67ace5f56'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fde5a88191a426b62ab5c52b63
🔍 Fetching Sora remix feed for post: s_68f720fd99f48191b2ba544ad572503d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fd99f48191b2ba544ad572503d/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fd8e0481919cffea4b13058e67 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fd8e0481919cffea4b13058e67/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721014020819192d6e4aa6b42d1c3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721014020819192d6e4aa6b42d1c3/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8679cd870ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '138',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=XF4SnawvdWCBvbiwKs.KmFRtUpSZ6Q8FmlRS7ZYXxi8-1761026328762-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '143',
  'x-oai-request-id': 'req_410b45ff7e0d5ce1703ee0e403059964',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9ba9b895-c945-4f26-99b4-7cca42c92f66',
  'x-sora-request-id': 'req_410b45ff7e0d5ce1703ee0e403059964'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fda9c081918a6f4fdd050886a2
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867a097dcc6e-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '126',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=TEMb1kDcjMumxcwKW5oQWNnd6jihOMxtP8PEDGzHbsQ-1761026328791-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '129',
  'x-oai-request-id': 'req_48d7113304326c19360bc6e6fbdf2630',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e3e098b4-e028-4b1c-acb4-d694e1aaba8d',
  'x-sora-request-id': 'req_48d7113304326c19360bc6e6fbdf2630'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fd8e0481919cffea4b13058e67
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867a2c9ee148-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '119',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=6T20q9s8tj1QUkObgIOEmVDGZ3PE1CQ2GibQuNyACag-1761026328804-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '122',
  'x-oai-request-id': 'req_6449d0d7d930a0e2970dc81c014064ab',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '996924c5-4a74-41fc-bab8-c209daed4d42',
  'x-sora-request-id': 'req_6449d0d7d930a0e2970dc81c014064ab'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721014020819192d6e4aa6b42d1c3
🔍 Fetching Sora remix feed for post: s_68f720fe9ef48191bb1b080e57bdfe7a with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fe9ef48191bb1b080e57bdfe7a/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867a0c39d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '302',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=fNbncl2xBCE46FxxDeTPnif8pUSp_N7UWvUQQt_8C4E-1761026329013-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '360',
  'x-oai-request-id': 'req_77bb75329e794e0b57b2fcf2c542f890',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd258ef5d-93c2-4fde-adfd-463f66277e10',
  'x-sora-request-id': 'req_77bb75329e794e0b57b2fcf2c542f890'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fd99f48191b2ba544ad572503d
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867b8f940ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '144',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=vXiagug0BWRKKgLPM8ZJXcqAmGEiQ1N4DbeW13b4uqc-1761026329048-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '149',
  'x-oai-request-id': 'req_070cbba9ab957469035fd14fdc1ccc75',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'f681f0e0-4d15-4681-94ec-c696734d08ba',
  'x-sora-request-id': 'req_070cbba9ab957469035fd14fdc1ccc75'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fe9ef48191bb1b080e57bdfe7a
🔍 Fetching Sora remix feed for post: s_68f720fd86848191b08bfb88caa127c9 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fd86848191b08bfb88caa127c9/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fd73448191a5df1d401df77a95 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fd73448191a5df1d401df77a95/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fd6f1c819181d2848d4868fd07 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fd6f1c819181d2848d4868fd07/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867d1853d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '135',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=jEiofjj9xnzRDrhA4AsMd1enL9TT89cbuxZn2El6hPA-1761026329283-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '138',
  'x-oai-request-id': 'req_a5a529242d5eb992fbdfe2256ee8842e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '54240d6c-18c8-4c36-a46f-9249bbb25de5',
  'x-sora-request-id': 'req_a5a529242d5eb992fbdfe2256ee8842e'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fd73448191a5df1d401df77a95
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867d19cc0ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '136',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=8lCdCJCd6w9hpxvIkgGqwwjMnl72ClqbC9PgE2qbz48-1761026329307-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '139',
  'x-oai-request-id': 'req_6db2fa122b7919ef9a459a2824984fef',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '4725de5a-b6b5-427c-9e31-e3720cdb6ea5',
  'x-sora-request-id': 'req_6db2fa122b7919ef9a459a2824984fef'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fd86848191b08bfb88caa127c9
🔍 Fetching Sora remix feed for post: s_68f720fd6b908191b1d79644f10036f1 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fd6b908191b1d79644f10036f1/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fd082081919205bae60ebeb4d4 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fd082081919205bae60ebeb4d4/remix_feed?limit=20
🔑 Bearer token present: true
✅ Cache hit for remix feed: s_68f720fd86848191b08bfb88caa127c9
🔍 Fetching Sora remix feed for post: s_68f720fcd8008191a726d326601e5d1f with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fcd8008191a726d326601e5d1f/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86756b1ed130-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1491',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=9bEcGSHt.NlLMJ6t9rcVNhzDXS1x4zPx9bAxCCBPTSw-1761026329416-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1497',
  'x-oai-request-id': 'req_0f3de534a31f81a69a5e4b57fc8058d7',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '51a46c5e-983b-4f64-a54e-885c98084ce0',
  'x-sora-request-id': 'req_0f3de534a31f81a69a5e4b57fc8058d7'
}
✅ Successfully fetched remix feed with 18 video remixes
💾 Cached remix feed for post: s_68f720fe8638819186ed53d1468bdec5
🔍 Fetching Sora remix feed for post: s_68f720fcd12c8191adf1b1b6fecea068 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fcd12c8191adf1b1b6fecea068/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867ebbc20ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '124',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=z8nRVLuALb0v1ObnlOOQDwqtU2KGzAn3LY0hyEsyuRI-1761026329532-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '128',
  'x-oai-request-id': 'req_21f8bafe72fdb824c695be819611e411',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'a03f9513-923e-407d-b04e-e728b006f5de',
  'x-sora-request-id': 'req_21f8bafe72fdb824c695be819611e411'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fd6b908191b1d79644f10036f1
🔍 Fetching Sora remix feed for post: s_68f720fcb844819193e1ddde8b160648 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fcb844819193e1ddde8b160648/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867ecadbd8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '131',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=GVsBNi7rQlJBDQ92lc.iQ0wCW7uQNf4qv95iAUVPHC8-1761026329551-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '134',
  'x-oai-request-id': 'req_2b045df89c301a61a9b18919333d603d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e0088928-bb96-4f1d-9cb6-5ce1d6111cd6',
  'x-sora-request-id': 'req_2b045df89c301a61a9b18919333d603d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fd082081919205bae60ebeb4d4
🔍 Fetching Sora remix feed for post: s_68f720fd6f1c819181d2848d4868fd07 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fd6f1c819181d2848d4868fd07/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867f2eced130-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '163',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=HwkCo4nwTQqtsG56uvEh7THWEihBgXxOIBpbg7K3Jeg-1761026329643-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '168',
  'x-oai-request-id': 'req_39128fed0a30c19f0ef62714a1b77e0d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd7a021bb-cb3a-444e-898b-3c24fcb1180d',
  'x-sora-request-id': 'req_39128fed0a30c19f0ef62714a1b77e0d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fcd12c8191adf1b1b6fecea068
✅ Cache hit for remix feed: s_68f720fd6b908191b1d79644f10036f1
🔍 Fetching Sora remix feed for post: s_68f720fc6dac8191831a6535209c49b0 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fc6dac8191831a6535209c49b0/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867fbd010ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '143',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=HY5iEBmOB5XZC0Zp5Jl6fbSHeUDAIrUEMKiUqOgqxqo-1761026329720-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '148',
  'x-oai-request-id': 'req_791f378be026332fd5fcab2cbfc0ee9d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '52ee686b-778b-49ae-a12a-ddac94866f89',
  'x-sora-request-id': 'req_791f378be026332fd5fcab2cbfc0ee9d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fcb844819193e1ddde8b160648
🔍 Fetching Sora remix feed for post: s_68f720fc3f248191914c65e6d0a115a4 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fc3f248191914c65e6d0a115a4/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867ecedfe148-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '299',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=sd_HM.X52Mz8Y6iN2oaLjJnWVVyRNGtJWIzTfXz2b.Y-1761026329736-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '302',
  'x-oai-request-id': 'req_d0b0a8fabd4d59435210cf01481d4117',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'cc099ef0-7827-4dbe-be69-d27d5675158f',
  'x-sora-request-id': 'req_d0b0a8fabd4d59435210cf01481d4117'
}
✅ Successfully fetched remix feed with 1 video remixes
💾 Cached remix feed for post: s_68f720fcd8008191a726d326601e5d1f
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 5,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867fdc60d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '166',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=JdZpXK4wwyufj6QBVg.2OlqUu6d4BoHfuENtR96Y1VQ-1761026329756-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '170',
  'x-oai-request-id': 'req_e370dd181f7ae0fd595e2aed8992c27f',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '33caac04-031b-46d1-9c0d-8d22babab1fe',
  'x-sora-request-id': 'req_e370dd181f7ae0fd595e2aed8992c27f'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fd6f1c819181d2848d4868fd07
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 11,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e867d1df1cc6e-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '623',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=zkGHG10MOlkbFg4G5v5Y8KTvGb9sFAczCcUUaIOX104-1761026329881-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '728',
  'x-oai-request-id': 'req_cc9a33a4e9dfc7bea27e8069b78e9546',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '460bce90-7d21-4d71-9bd1-78f7bde0bd36',
  'x-sora-request-id': 'req_cc9a33a4e9dfc7bea27e8069b78e9546'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fd6f1c819181d2848d4868fd07
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching Sora remix feed for post: s_68f720fc3f248191914c65e6d0a115a4 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fc3f248191914c65e6d0a115a4/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fc6dac8191831a6535209c49b0 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fc6dac8191831a6535209c49b0/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86810ea00ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '139',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=fkCtBRSQJe8GlUxNUgksgV_OXwlFQo.NoR9yJ8BY72k-1761026329920-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '144',
  'x-oai-request-id': 'req_f67617c05fb3298b2e488642cb30bd8e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'df880f03-2e91-49ea-a6fc-5e763cbf9171',
  'x-sora-request-id': 'req_f67617c05fb3298b2e488642cb30bd8e'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fc3f248191914c65e6d0a115a4
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86821fb1d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '128',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Kz8wWnkNDU6M8yg0wqaIFQiaO1XSk3PYfTBkOFPgt5M-1761026330081-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '131',
  'x-oai-request-id': 'req_8de407e4454755f8c82dd1bd90d2e5b9',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7fea08e9-a638-45f9-99e4-90152d9eeb03',
  'x-sora-request-id': 'req_8de407e4454755f8c82dd1bd90d2e5b9'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fc3f248191914c65e6d0a115a4
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86821d36cc6e-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '130',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=MGshzt0P_XkUPAxiKXsvW8h1FgswIoHIFblS.pYZM34-1761026330087-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_e6780f2adf6c04b38da0de124a9cdca4',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd41ca6da-38b9-44a9-befc-0768adf3e906',
  'x-sora-request-id': 'req_e6780f2adf6c04b38da0de124a9cdca4'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fc6dac8191831a6535209c49b0
🔍 Fetching Sora remix feed for post: s_68f720fbe470819195572f6a0f183be3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fbe470819195572f6a0f183be3/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fc02188191b94f0e6d3aec09ac with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fc02188191b94f0e6d3aec09ac/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e868359690ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '162',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=j_wtnh0..rnfg__2lykCuGrOp7u08Mldpiot6KYMI1o-1761026330314-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '165',
  'x-oai-request-id': 'req_36a67442ed91ae2572121aedc497cc4d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'fca34078-5628-4c2e-8057-689fe4836bd2',
  'x-sora-request-id': 'req_36a67442ed91ae2572121aedc497cc4d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fbe470819195572f6a0f183be3
🔍 Fetching Sora remix feed for post: s_68f720fbe25c8191a5a263349d2ae46b with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fbe25c8191a5a263349d2ae46b/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8683596dd8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '312',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=DsggZJEBz7b5wXSl_PsYmHvg3ugmd0jp9KeuA8NG7PI-1761026330483-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '316',
  'x-oai-request-id': 'req_a039fa03c371cb3510ca3d57c0105944',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '3c607ab4-5b8d-401a-9548-808812487cbc',
  'x-sora-request-id': 'req_a039fa03c371cb3510ca3d57c0105944'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fc02188191b94f0e6d3aec09ac
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8684bb0f0ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '120',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=hay9wW6QYq0UoVqIoArOVnzjVr5MDj4Ubcz2Nq_Kznc-1761026330491-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '124',
  'x-oai-request-id': 'req_3bb536015fcc01b0d2c250a111a03bb0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b1125fb1-4da2-43e2-846a-8d2829dd6d74',
  'x-sora-request-id': 'req_3bb536015fcc01b0d2c250a111a03bb0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fbe25c8191a5a263349d2ae46b
🔍 Fetching Sora remix feed for post: s_68f720fbd5508191b03a6631a9c6ed9d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fbd5508191b03a6631a9c6ed9d/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fbcc648191845ce92a93a2918e with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fbcc648191845ce92a93a2918e/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8680b8b7d130-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '168',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=YXR1hlyYMFUlSiXC2QUJJ_v3lKn05hock6MkpEVVZCo-1761026330548-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '825',
  'x-oai-request-id': 'req_5f334f8eddf1246ee22679b050c50ee7',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '208539f2-ce1b-46f9-9e22-3c87a00fead1',
  'x-sora-request-id': 'req_5f334f8eddf1246ee22679b050c50ee7'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fc6dac8191831a6535209c49b0
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86860ca80ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '136',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=3NvV4gCaCtCJnr7WY6egWku8z9BtX8wBLi9acTV5VtU-1761026330721-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '139',
  'x-oai-request-id': 'req_7b7ef4f4fe69597dc5a37d1f9d14d3b6',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e1c6ccb2-238c-4ecc-a1af-d1c5b55f9551',
  'x-sora-request-id': 'req_7b7ef4f4fe69597dc5a37d1f9d14d3b6'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fbd5508191b03a6631a9c6ed9d
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86861da8d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '150',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=ng._8AJbKvmLcDPHWUsLcnx3aOtVbonSetObJCFFrws-1761026330741-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '154',
  'x-oai-request-id': 'req_8dd39ce7a53ddf6a315d08a775e6bfb0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5ecb9bdd-db0b-4719-9c38-72cd9ac70d39',
  'x-sora-request-id': 'req_8dd39ce7a53ddf6a315d08a775e6bfb0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fbcc648191845ce92a93a2918e
🔍 Fetching Sora remix feed for post: s_68f720fbbddc81919efca22527cded75 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fbbddc81919efca22527cded75/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fdc4b48191bfb8ae87b8b9cde6 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fdc4b48191bfb8ae87b8b9cde6/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86876f72d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '144',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=viwpOQ91dU.QJdTcVXrkz6AD.ZKtVu5MJrQ2aMgc5_I-1761026330952-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '148',
  'x-oai-request-id': 'req_6db2fa122b7919ef9a459a2824984fef',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'c7a8ec96-aabf-49a1-be89-767330f1c2cb',
  'x-sora-request-id': 'req_6db2fa122b7919ef9a459a2824984fef'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fdc4b48191bfb8ae87b8b9cde6
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86876e3b0ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '166',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=49SeYFFv1fvg21kjjdKRz9d6uUuOq4CDsJgXP81vrvw-1761026330977-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '173',
  'x-oai-request-id': 'req_f8140c169395b2acc26f2d51536f7c1d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ea0fa880-ed17-4eea-9057-add1626299e1',
  'x-sora-request-id': 'req_f8140c169395b2acc26f2d51536f7c1d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fbbddc81919efca22527cded75
🔍 Fetching Sora remix feed for post: s_68f720fbb640819190be6e3e5a6e415e with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fbb640819190be6e3e5a6e415e/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fb86488191814a9dc11dfac72d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fb86488191814a9dc11dfac72d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8688cfd90ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '152',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=ldgOagUtBuVsfJqRVfL7P6f44Mas5_aMGfreWSjq_.8-1761026331189-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '159',
  'x-oai-request-id': 'req_424a9989fc7a3be603015252b9b1fe88',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '74ed3a17-ae35-4d8b-ad01-6af47812a90c',
  'x-sora-request-id': 'req_424a9989fc7a3be603015252b9b1fe88'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fbb640819190be6e3e5a6e415e
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e868969f6d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '152',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=eZkU6I6tWkBzixyj7aBrSNGCQ.xUu7DuxAn0CbL7v0w-1761026331274-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '156',
  'x-oai-request-id': 'req_c13e20fc685e1e1c55ac62abe70a3730',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '637b49c1-662e-41cc-975f-6827412c77a5',
  'x-sora-request-id': 'req_c13e20fc685e1e1c55ac62abe70a3730'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fb86488191814a9dc11dfac72d
🔍 Fetching Sora remix feed for post: s_68f720fb60508191a1cb56fa5751c02c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fb60508191a1cb56fa5751c02c/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f720fb4e648191bb88c8b16baf15b3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f720fb4e648191bb88c8b16baf15b3/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e86751c2d1236-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '3040',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=xCAO7HEWeHyP7v8DHPIE3d828F8.ipxEI9fVFfZrvBQ-1761026331296-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '3414',
  'x-oai-request-id': 'req_f5ab9d1d7ba2979743b77c5d4cf97662',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'feecbbce-b214-4084-8f26-5aa459647027',
  'x-sora-request-id': 'req_f5ab9d1d7ba2979743b77c5d4cf97662'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fe9ef48191bb1b080e57bdfe7a
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e868aa9e30ce1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '152',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=aUWK23ZtkyRZqJv.1qukukhePve9TOdn0ntfl85ohgo-1761026331481-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '156',
  'x-oai-request-id': 'req_559abb3c41aa0e1516749d48d80dc92d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '075f2e61-1770-45c6-b535-97e72069c6c5',
  'x-sora-request-id': 'req_559abb3c41aa0e1516749d48d80dc92d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fb60508191a1cb56fa5751c02c
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e868aab87d8ab-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 05:58:51 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '154',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=ssP_fzeA4zSUfhX8sFFqhdhzMZhpE2Ouw16EDupXF7g-1761026331482-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '158',
  'x-oai-request-id': 'req_1772b17bb5dd5f408541db64fc4ce461',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9c5cf2dc-3e4c-4a8b-a674-9240693e3011',
  'x-sora-request-id': 'req_1772b17bb5dd5f408541db64fc4ce461'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f720fb4e648191bb88c8b16baf15b3
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 86,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 9,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 6,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 9,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 9,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 9,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching latest posts from database: { limit: 20, offset: 0 }
✅ Found 20 latest posts from database
🔍 Fetching Sora remix feed for post: s_68f721acb0608191bc1e834589cd9498 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721acb0608191bc1e834589cd9498/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721ad6e6c819195b6ad06e7b8c203 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ad6e6c819195b6ad06e7b8c203/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721ad6e6c819195b6ad06e7b8c203 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ad6e6c819195b6ad06e7b8c203/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ad3ef60eac3-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '118',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=KHh72ZsCqW_zNrnLPKT_XY3glwoTEl8HD6_1XFY7W6k-1761026507009-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '121',
  'x-oai-request-id': 'req_3d4b467f2b24bf80c73b8b0e73b6f458',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7acdf357-9cd8-4ddf-baac-28ca411273f4',
  'x-sora-request-id': 'req_3d4b467f2b24bf80c73b8b0e73b6f458'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ad6e6c819195b6ad06e7b8c203
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ad3db4ce26a-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '348',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Sq1X_lqRfOsXHz7LEKS8QorccZAUWbKjED0UU_P5Fws-1761026507272-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '392',
  'x-oai-request-id': 'req_ae3d1cb765007ef93f10cc8421ad07fa',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '21383165-5a4e-4e7f-bdcc-ee41a4c3a677',
  'x-sora-request-id': 'req_ae3d1cb765007ef93f10cc8421ad07fa'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ad6e6c819195b6ad06e7b8c203
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ad3ccc18e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '552',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=znpjlIX63eXApBzSS4hMiuz6N2rk27huZccdeRkmsJY-1761026507534-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '649',
  'x-oai-request-id': 'req_f8eb11ccc80df57385f4a77b577da15f',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '6a336703-e79e-4d99-8270-e80bf79da2b9',
  'x-sora-request-id': 'req_f8eb11ccc80df57385f4a77b577da15f'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721acb0608191bc1e834589cd9498
🔍 Fetching Sora remix feed for post: s_68f721ac9b088191aca0cff28e2167ac with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ac9b088191aca0cff28e2167ac/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721ac8ef0819188a31a1afc97178c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ac8ef0819188a31a1afc97178c/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 13,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ad88b298e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '151',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=5t6.WVV4i6ihaUm4MA38nBdPPVhOcHHg.WEITfokcXE-1761026507774-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '155',
  'x-oai-request-id': 'req_2036020b8a9ecf3e142f9fc845ac3016',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '18620748-b658-4075-af28-1f3ab10f8f87',
  'x-sora-request-id': 'req_2036020b8a9ecf3e142f9fc845ac3016'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ac9b088191aca0cff28e2167ac
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ad89dbce26a-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '144',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=nsuChMuzjcLRKleL6q5gEFJps5v70Cwzn9pmyyOZnVo-1761026507777-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '148',
  'x-oai-request-id': 'req_8117b51bbaf1bcebdf3ab12cf37a503b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ba1448c5-6746-423c-8ccd-adce088851c7',
  'x-sora-request-id': 'req_8117b51bbaf1bcebdf3ab12cf37a503b'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ac8ef0819188a31a1afc97178c
🔍 Fetching Sora remix feed for post: s_68f721ac83b48191817cfee4fed5cdab with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ac83b48191817cfee4fed5cdab/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721ac712881919965c5fc3d5eae3d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ac712881919965c5fc3d5eae3d/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ad9ee61e26a-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '130',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=aBmV_IZvbPNHjLtUb9TaUMb1r2qyZj.ZayiCMbIrBB0-1761026507986-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_e8d910dab769dc37b8441d9dd8968fab',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b657aaac-9274-4744-9870-1c9ea354948a',
  'x-sora-request-id': 'req_e8d910dab769dc37b8441d9dd8968fab'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ac712881919965c5fc3d5eae3d
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ad9dcf88e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '158',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=gxUOFXp_jEVi6IK8ajPHzxP7y9smEGXkzo_zoXDax3k-1761026507992-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '165',
  'x-oai-request-id': 'req_a64f9d8a4827eb946d281a3afa7c1c5b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '08c35f38-278b-4077-bcf7-bbebfc7bf5a9',
  'x-sora-request-id': 'req_a64f9d8a4827eb946d281a3afa7c1c5b'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ac83b48191817cfee4fed5cdab
🔍 Fetching Sora remix feed for post: s_68f721ac591c819190d5d97685b643fe with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ac591c819190d5d97685b643fe/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721abdffc8191a54f1c732db69de8 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721abdffc8191a54f1c732db69de8/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8adb2eb18e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '135',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=MbsfixvCvtADSbleWIDMz1TbPNtxEfZmAENEVQXYLmY-1761026508176-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '138',
  'x-oai-request-id': 'req_525b5dbe933dbd32e5ae749af4e48efd',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '29b2fec1-a998-4c6f-87d0-8fada38d8089',
  'x-sora-request-id': 'req_525b5dbe933dbd32e5ae749af4e48efd'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ac591c819190d5d97685b643fe
🔍 Fetching Sora remix feed for post: s_68f721abd73c8191bfadc9bad4a0d945 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721abd73c8191bfadc9bad4a0d945/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8adbb80ee26a-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '136',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=spJ7B4k1UehbThfSLEs01vyf15Vc5n6Qy6zqahjBEAc-1761026508274-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '140',
  'x-oai-request-id': 'req_886667a41d7be8063256f7909a29dedf',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'eeff4739-cc16-49c4-b09e-c86949efbb4d',
  'x-sora-request-id': 'req_886667a41d7be8063256f7909a29dedf'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721abdffc8191a54f1c732db69de8
🔍 Fetching Sora remix feed for post: s_68f721ab7df481918a7ed0e7808db223 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ab7df481918a7ed0e7808db223/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8adc68148e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '139',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=V4YYjTdSrxgr3G9E.zbbdz9AnxyDM7XwxF.SAcdfEXc-1761026508383-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '143',
  'x-oai-request-id': 'req_fed8a97bfeaeff9f10c36d60d38b271d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '951015c6-c772-47e3-89e7-270f4fd018f1',
  'x-sora-request-id': 'req_fed8a97bfeaeff9f10c36d60d38b271d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721abd73c8191bfadc9bad4a0d945
🔍 Fetching Sora remix feed for post: s_68f721ab339c8191a12ace18117b693d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ab339c8191a12ace18117b693d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8add3972e26a-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=t3QyShAdN3j2YMNZKciHXa6YtWU54I1u6AUoJkTfruY-1761026508508-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_499793a390b7e106e3b16ee6520685e8',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '76cce0f3-7d6e-4840-906a-98c25cb4ab32',
  'x-sora-request-id': 'req_499793a390b7e106e3b16ee6520685e8'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ab7df481918a7ed0e7808db223
🔍 Fetching Sora remix feed for post: s_68f721ab2ad8819193c896975cc6cbd1 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721ab2ad8819193c896975cc6cbd1/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8addd9fe8e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=fQNRCBTPUBC.ZoLAWyks4TWmlS3VY2mRBE7Wxd.LYfc-1761026508607-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_4f39e1fbbdae94364b1b54f9210acc24',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5d4f616f-7cb2-4376-822b-10ba032b013f',
  'x-sora-request-id': 'req_4f39e1fbbdae94364b1b54f9210acc24'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ab339c8191a12ace18117b693d
🔍 Fetching Sora remix feed for post: s_68f721aacd4c8191b86d57bc19a03c15 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721aacd4c8191b86d57bc19a03c15/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ade7a9fe26a-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '148',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=LLBt7jjncfE2tWlt4Bfd7UPW1ATHJzp5ib10GSeLC_g-1761026508732-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '153',
  'x-oai-request-id': 'req_63343c932c7c70a888a340ab91bb49d7',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '35377b2b-8736-4c4e-8f88-44b32912d963',
  'x-sora-request-id': 'req_63343c932c7c70a888a340ab91bb49d7'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721ab2ad8819193c896975cc6cbd1
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8adf1bab8e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '119',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Ky6DhC.opAt1ZciTH1lnoEWT2.VofUsIGhfpqey55RY-1761026508822-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '123',
  'x-oai-request-id': 'req_b293d0e719acef0724ed3a49dedb8462',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '33c4a9fa-f48e-4a76-86b8-88339fcbd0ec',
  'x-sora-request-id': 'req_b293d0e719acef0724ed3a49dedb8462'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721aacd4c8191b86d57bc19a03c15
🔍 Fetching Sora remix feed for post: s_68f721aa91bc81918d6a4df51c2cfa48 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721aa91bc81918d6a4df51c2cfa48/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721aaa1a881918c1742c29d973c19 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721aaa1a881918c1742c29d973c19/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ae2685b8e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '117',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=zD_7Ld574GJE4rJDFWrpFz7.tRd9t0MCaWMhyKe8_z0-1761026509322-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '120',
  'x-oai-request-id': 'req_65b351d71c3d8b53cb3699a91dc6c5c9',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '499578b0-8a88-4be6-9cd9-fef15578421c',
  'x-sora-request-id': 'req_65b351d71c3d8b53cb3699a91dc6c5c9'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721aa91bc81918d6a4df51c2cfa48
🔍 Fetching Sora remix feed for post: s_68f721aa58888191a8457883719019d6 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721aa58888191a8457883719019d6/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ae28d55e26a-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '203',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=8NvlV_mgJYtaqkkGGG2Pc8xuSooTa3ItfxsAptFxb5M-1761026509426-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '207',
  'x-oai-request-id': 'req_47e47f2c5da1d99db53dae9928688a0b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '4ce2a7b8-e086-4ead-adab-b162696e2006',
  'x-sora-request-id': 'req_47e47f2c5da1d99db53dae9928688a0b'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721aaa1a881918c1742c29d973c19
🔍 Fetching Sora remix feed for post: s_68f721aa58488191a5230ba5d12ea5ef with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721aa58488191a5230ba5d12ea5ef/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ae3ca408e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '199',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.ZUiMV7ubae89gz1N6MlY_OsP2aIhKUqwbLrjYKQwdM-1761026509673-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '248',
  'x-oai-request-id': 'req_615c2b7d4c58d187a90952579341528c',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b76e7ba1-c65b-4335-9d28-0dcfd754ec70',
  'x-sora-request-id': 'req_615c2b7d4c58d187a90952579341528c'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721aa58888191a8457883719019d6
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ae47e6de26a-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '137',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=e6TllMUKvO1wiSLon7Qim4PlMttyyU7MyZmZsO4Z8SE-1761026509680-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '140',
  'x-oai-request-id': 'req_47f3c4f0d009bbfea8ec9e8a9a377177',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '8f7e7d92-8b42-44c1-810b-4255b590e51a',
  'x-sora-request-id': 'req_47f3c4f0d009bbfea8ec9e8a9a377177'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721aa58488191a5230ba5d12ea5ef
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
🔍 Fetching Sora remix feed for post: s_68f721a9f2fc8191b7c19185079f36e3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721a9f2fc8191b7c19185079f36e3/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f721a9c91c8191ae01da10a3241263 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721a9c91c8191ae01da10a3241263/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ae5bc788e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '130',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=ytSxbyklUQKrZhlpZ.kno.HhS9OHeyCMrLG2YE5_deE-1761026509868-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_08cc04d8901aafe67a9c988414403512',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b9138462-8f6c-425c-8f72-7836f18a8607',
  'x-sora-request-id': 'req_08cc04d8901aafe67a9c988414403512'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721a9f2fc8191b7c19185079f36e3
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ae5bf07e26a-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:49 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '139',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=X.YCtDS5oP99zgSxf3ElZQTrnj9mGJvLkE_0KCuure0-1761026509888-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '143',
  'x-oai-request-id': 'req_ce3ee1805def61c55dfe7f6b2848ad5e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '0498af71-a9d9-4345-bbd8-51aee94ca880',
  'x-sora-request-id': 'req_ce3ee1805def61c55dfe7f6b2848ad5e'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721a9c91c8191ae01da10a3241263
🔍 Fetching Sora remix feed for post: s_68f721a9c8788191aee3fce52951e1af with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f721a9c8788191aee3fce52951e1af/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e8ae6fe098e1c-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:01:50 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '693',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=pdbflKNauNYoQn6Js6Wnn9hxNGcoeSnMCk4W05m9IZg-1761026510680-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '749',
  'x-oai-request-id': 'req_ceee6cf26a351eacbb2e21f0b05467a2',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '51064704-5f07-47b6-8b2d-ec4c8da9ae36',
  'x-sora-request-id': 'req_ceee6cf26a351eacbb2e21f0b05467a2'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f721a9c8788191aee3fce52951e1af
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 10,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 16,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 9,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 11,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 14,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 9,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
🔍 Fetching latest posts from database: { limit: 2, offset: 0 }
✅ Found 2 latest posts from database
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 87,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching latest posts from database: { limit: 1, offset: 0 }
✅ Found 1 latest posts from database
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching latest posts from database: { limit: 20, offset: 0 }
✅ Found 20 latest posts from database
🔍 Fetching Sora remix feed for post: s_68f722a7b060819192316ee546ee8d64 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a7b060819192316ee546ee8d64/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f722a75d0881918d645833e1e0af60 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a75d0881918d645833e1e0af60/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f722a7b060819192316ee546ee8d64 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a7b060819192316ee546ee8d64/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90a54900ef30-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:45 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '134',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=OrM_0gmikP27Kdse7_UH7NlRiJFpsQbUiCzNOq53W3U-1761026745315-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '137',
  'x-oai-request-id': 'req_fb091d0d093e434f8965e55e5cd519bc',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '486586ca-c078-4cf5-9f45-5e05062b0b67',
  'x-sora-request-id': 'req_fb091d0d093e434f8965e55e5cd519bc'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a75d0881918d645833e1e0af60
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90a53b15ffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:45 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '144',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=sX5F7UHyqTl1LgslMQNjD1KLJL5H4eZC.Kw5ERv_ltw-1761026745324-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '148',
  'x-oai-request-id': 'req_55042bf8ff240d2988ca198b400912d1',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '0c515d77-4c53-4770-a728-51b3b2a15ecb',
  'x-sora-request-id': 'req_55042bf8ff240d2988ca198b400912d1'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a7b060819192316ee546ee8d64
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90a56c5f72e8-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:45 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '126',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Oe2yXSKIHG4c4IE3PWme8iLQylXNNZqw2HMLiWuZFA4-1761026745327-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '129',
  'x-oai-request-id': 'req_b8c3247a77fb6456e32d952efa2ec4e0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'baef258f-1814-428b-ba20-5ef2caa35abe',
  'x-sora-request-id': 'req_b8c3247a77fb6456e32d952efa2ec4e0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a7b060819192316ee546ee8d64
🔍 Fetching Sora remix feed for post: s_68f722a5b34881918776749c665e3558 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a5b34881918776749c665e3558/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f722a6472481918c82f78e7d764c1d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a6472481918c82f78e7d764c1d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90a6ed0fffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:45 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '132',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=mrluBMGFo.MeGRn223NVHzc.xZawP_PDuyZ5GZY5rVo-1761026745587-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '136',
  'x-oai-request-id': 'req_4574aa5b4a7568c9a077aa2b355800f9',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '67f0c0c6-379c-4af8-b1d0-2259ea419b3d',
  'x-sora-request-id': 'req_4574aa5b4a7568c9a077aa2b355800f9'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a5b34881918776749c665e3558
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90a6eb49ef30-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:45 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '149',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=xMmn8M2Jxf._t3XYg_COzDRWkMnZC5ssvgBx36IBUCI-1761026745597-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '152',
  'x-oai-request-id': 'req_e99216a5cf2e87b53f04649387303b87',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'be3f7d64-df57-4b1b-ae3e-157052065b40',
  'x-sora-request-id': 'req_e99216a5cf2e87b53f04649387303b87'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a6472481918c82f78e7d764c1d
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
🔍 Fetching Sora remix feed for post: s_68f722a579088191b91c13fc7cfacd15 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a579088191b91c13fc7cfacd15/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f722a50d188191898a79fc68457678 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a50d188191898a79fc68457678/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 5,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90a96fe3ffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:45 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '149',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=vo6BptvOsSaw1yfc1S6Gzm2nwOLD0F9xiw8QU7N_uvs-1761026745997-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '153',
  'x-oai-request-id': 'req_da4bb6668bda734f46f6bf98aa2123f2',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd49ddfa3-3250-425e-80f4-b0128a30f7f1',
  'x-sora-request-id': 'req_da4bb6668bda734f46f6bf98aa2123f2'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a579088191b91c13fc7cfacd15
🔍 Fetching Sora remix feed for post: s_68f722a4fa5c8191ad33d01b60fd5e4c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a4fa5c8191ad33d01b60fd5e4c/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90a97e5bef30-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '145',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=87UmU4nvo5uDvurbxqFrqbIbqjrprPDvqYTk4q4iHnA-1761026746014-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '149',
  'x-oai-request-id': 'req_054f0ac65d582a8c66e258eb4fa6c4ce',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5794c870-c4a0-478c-a947-ecb28f578e9e',
  'x-sora-request-id': 'req_054f0ac65d582a8c66e258eb4fa6c4ce'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a50d188191898a79fc68457678
🔍 Fetching Sora remix feed for post: s_68f722a4ea708191bc5d530f77fe0c00 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a4ea708191bc5d530f77fe0c00/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90aab95fffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '148',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=U_.Rl4fEXCAf7PzaYuqN8p3G9z95FHLMOSPSQqdoTSc-1761026746196-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '152',
  'x-oai-request-id': 'req_09d4e6d564c64a491af03532f6e8e8b0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9bfb2815-71da-46fa-932d-5fed57db3ba3',
  'x-sora-request-id': 'req_09d4e6d564c64a491af03532f6e8e8b0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a4fa5c8191ad33d01b60fd5e4c
🔍 Fetching Sora remix feed for post: s_68f722a49d288191a170390272b10586 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a49d288191a170390272b10586/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90ab58c5ef30-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:46 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '791',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=G6j54hkRf4ln0dI.J6fQOCx3zTVemHzVb4Er7_IanD8-1761026746952-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '795',
  'x-oai-request-id': 'req_ae8446fd968b86012df0ee3cf0e0b227',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '43feb19e-b6d5-46f6-a5fe-9eea001a7be1',
  'x-sora-request-id': 'req_ae8446fd968b86012df0ee3cf0e0b227'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a4ea708191bc5d530f77fe0c00
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90abfb28ffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '757',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=9ZPFHa9vcMNKslqh4Sym8a2OkE.hOXMluE.D29EjwvI-1761026747016-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '763',
  'x-oai-request-id': 'req_cc1e693b2cfc91793183afcf4c4e73ed',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '35426d1f-e022-4604-9718-3861d7dfe36c',
  'x-sora-request-id': 'req_cc1e693b2cfc91793183afcf4c4e73ed'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a49d288191a170390272b10586
🔍 Fetching Sora remix feed for post: s_68f722a466488191aae80b601d0a2681 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a466488191aae80b601d0a2681/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f722a44888819194622e775d781f4d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a44888819194622e775d781f4d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90b34ca5ffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '160',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=T8S.2qhd1wmcSVmmaJ507y6kFoHazuiL8scMSWWtARs-1761026747590-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '164',
  'x-oai-request-id': 'req_d240bdc7c8f012d2ae74a1331b2d9b81',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '3a3fa257-025b-4201-b139-cf58e00cdd5c',
  'x-sora-request-id': 'req_d240bdc7c8f012d2ae74a1331b2d9b81'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a466488191aae80b601d0a2681
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90b3ca9fef30-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '159',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=W5kWvd0peUwgkgXQ2aUOwZdz9AdZVCO6.JQbTbOhB4o-1761026747660-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '165',
  'x-oai-request-id': 'req_aa299d2b83601aad1d6c1dbea23d853d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e45414f1-086c-4b47-9bff-ce81671d46c0',
  'x-sora-request-id': 'req_aa299d2b83601aad1d6c1dbea23d853d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a44888819194622e775d781f4d
🔍 Fetching Sora remix feed for post: s_68f722a422d48191aa3d7ca7c6a14ed5 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a422d48191aa3d7ca7c6a14ed5/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
🔍 Fetching Sora remix feed for post: s_68f722a4223c81919ff595c0af50c3b4 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a4223c81919ff595c0af50c3b4/remix_feed?limit=20
🔑 Bearer token present: true
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90b50ebbffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '135',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=fG0qyI8Gx_DXaEyG4iTCRmd5TayieJ8W97a3iuBM594-1761026747839-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '139',
  'x-oai-request-id': 'req_e0822c3f0d84daf40ad1aecf70d07312',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7943b6d6-a026-4318-813f-290c65feea11',
  'x-sora-request-id': 'req_e0822c3f0d84daf40ad1aecf70d07312'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a422d48191aa3d7ca7c6a14ed5
🔍 Fetching Sora remix feed for post: s_68f722a416a4819195e609c25e84d9d6 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a416a4819195e609c25e84d9d6/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90b5acf5ef30-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:47 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '135',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=b8Qzr49w4EzxWt0Ejt2QAcfW29D86yaiGzEzoKoqVRY-1761026747939-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '139',
  'x-oai-request-id': 'req_cad74626f94519116c8fef6585f46d0d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'a0d19461-c630-48da-b1b7-6e5449e3f857',
  'x-sora-request-id': 'req_cad74626f94519116c8fef6585f46d0d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a4223c81919ff595c0af50c3b4
🔍 Fetching Sora remix feed for post: s_68f722a3f49c819197605a3c7f3d2d01 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a3f49c819197605a3c7f3d2d01/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90b64835ffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '158',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=7Tlbftf3qzYCgFXRgEeX4bQ.kOM4HM0hIKqj8DVFY14-1761026748078-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '162',
  'x-oai-request-id': 'req_a6889717d5c7f741ce8f9fbc9b86f08d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '56a8f6bd-8be5-4ea3-b1bd-9c548dfe52d7',
  'x-sora-request-id': 'req_a6889717d5c7f741ce8f9fbc9b86f08d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a416a4819195e609c25e84d9d6
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90b70e92ef30-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '114',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=py24VlAARHKz0qQisUiEkHr0SuIUJxE.9JPz93QBWjw-1761026748131-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '117',
  'x-oai-request-id': 'req_8512b84c31cb14bf00f29011c4320b6d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '37d20ae4-5b3e-492d-b3f5-0cda65c672d8',
  'x-sora-request-id': 'req_8512b84c31cb14bf00f29011c4320b6d'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a3f49c819197605a3c7f3d2d01
🔍 Fetching Sora remix feed for post: s_68f722a3ac788191bb8e389d3339eade with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a3ac788191bb8e389d3339eade/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f722a3a6dc819195111ba45b01000b with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a3a6dc819195111ba45b01000b/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90b84a5cffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '132',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=FaCOCrv8J68LFRAhQ09u_yUMGXLGy56ahtxZd8ftKtw-1761026748354-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '136',
  'x-oai-request-id': 'req_b29d121bbacb6f7d9aa9664bf9b5ef74',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'f3649304-e52f-4551-ad5c-8f9d15851265',
  'x-sora-request-id': 'req_b29d121bbacb6f7d9aa9664bf9b5ef74'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a3ac788191bb8e389d3339eade
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90b8583fef30-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '152',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=o4CPu5nT.dP.gGyOhDt_Mxni0_o45019Iv3En2rIX38-1761026748380-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '156',
  'x-oai-request-id': 'req_5df6d88306d4d89461d0c794f5e112a8',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '13fb3737-7da4-49d6-a4c2-4b7e29088135',
  'x-sora-request-id': 'req_5df6d88306d4d89461d0c794f5e112a8'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a3a6dc819195111ba45b01000b
🔍 Fetching Sora remix feed for post: s_68f722a381d08191bc0d6545d7f3dbe1 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a381d08191bc0d6545d7f3dbe1/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f722a35944819182438b4eacb29427 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a35944819182438b4eacb29427/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90b98bcbffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '142',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=1.gUMx4mD5IZzHfMASMUe1hZP3ohdNYSG2pLrWI0om8-1761026748565-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '146',
  'x-oai-request-id': 'req_a9e363f63e4dede2166320099eb20c7e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '58de841e-42fc-4a1e-8b39-568e5dcde199',
  'x-sora-request-id': 'req_a9e363f63e4dede2166320099eb20c7e'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a381d08191bc0d6545d7f3dbe1
🔍 Fetching Sora remix feed for post: s_68f722a33a988191bc1e45cff455bd12 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f722a33a988191bc1e45cff455bd12/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90ba2aefef30-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '125',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=eyFvgY1TsNLRNzodeadbHjiHj0x3Bv4.5iqmp1iuhGE-1761026748652-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '128',
  'x-oai-request-id': 'req_016efa54d7a7b234c7dbb6b4f7e91512',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '1d4106ac-eabb-44ee-baaa-26ff373a643f',
  'x-sora-request-id': 'req_016efa54d7a7b234c7dbb6b4f7e91512'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a35944819182438b4eacb29427
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e90badd5cffc4-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:05:48 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '131',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=yJLqxlZHybgdsn1wGqujMw_MZqBz4qG6W77F8RbJTI8-1761026748772-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '139',
  'x-oai-request-id': 'req_c97069965c29ae396745a17e217edf1f',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '66ec7d45-8664-4bdb-8e90-7214dc805b05',
  'x-sora-request-id': 'req_c97069965c29ae396745a17e217edf1f'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f722a33a988191bc1e45cff455bd12
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 95,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 95,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 96,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 95,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 98,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 88,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
2025-10-21T06:07:19: PM2 log: App name:sora-feed-scanner id:1 disconnected
2025-10-21T06:07:19: PM2 log: App [sora-feed-scanner:1] exited with code [0] via signal [SIGINT]
2025-10-21T06:07:19: PM2 log: App name:sora-feed-app id:0 disconnected
2025-10-21T06:07:19: PM2 log: App [sora-feed-app:0] exited with code [0] via signal [SIGINT]
2025-10-21T06:07:19: PM2 log: App [sora-feed-app:0] starting in -cluster mode-
2025-10-21T06:07:19: PM2 log: App [sora-feed-app:0] online
   ▲ Next.js 15.5.6
   - Local:        http://localhost:3000
   - Network:      http://192.168.50.252:3000

 ✓ Starting...
 ✓ Ready in 364ms
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 24,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
2025-10-21T06:07:24: PM2 log: App [sora-feed-scanner:1] starting in -cluster mode-
2025-10-21T06:07:24: PM2 log: App [sora-feed-scanner:1] online
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
2025-10-21T06:07:26: PM2 log: App name:sora-feed-app id:0 disconnected
2025-10-21T06:07:26: PM2 log: App [sora-feed-app:0] exited with code [0] via signal [SIGINT]
2025-10-21T06:07:26: PM2 log: App [sora-feed-app:0] starting in -cluster mode-
2025-10-21T06:07:26: PM2 log: App [sora-feed-app:0] online
   ▲ Next.js 15.5.6
   - Local:        http://localhost:3000
   - Network:      http://192.168.50.252:3000

 ✓ Starting...
 ✓ Ready in 363ms
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 25,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 2,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
2025-10-21T06:07:33: PM2 log: App name:sora-feed-scanner id:1 disconnected
2025-10-21T06:07:33: PM2 log: App [sora-feed-scanner:1] exited with code [0] via signal [SIGINT]
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
2025-10-21T06:07:36: PM2 log: App name:sora-feed-app id:0 disconnected
2025-10-21T06:07:36: PM2 log: App [sora-feed-app:0] exited with code [0] via signal [SIGINT]
2025-10-21T06:07:36: PM2 log: App [sora-feed-app:0] starting in -cluster mode-
2025-10-21T06:07:36: PM2 log: App [sora-feed-app:0] online
   ▲ Next.js 15.5.6
   - Local:        http://localhost:3000
   - Network:      http://192.168.50.252:3000

 ✓ Starting...
 ✓ Ready in 354ms
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 53,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
2025-10-21T06:07:38: PM2 log: App [sora-feed-scanner:1] starting in -cluster mode-
2025-10-21T06:07:38: PM2 log: App [sora-feed-scanner:1] online
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 89,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 9,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 90,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 93,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 91,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 0,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 0,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 5,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 4,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 10,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 95,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 1,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 4,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 3,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 92,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 1,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
2025-10-21T06:09:22: PM2 log: Stopping app:sora-feed-app id:0
2025-10-21T06:09:22: PM2 log: App name:sora-feed-app id:0 disconnected
2025-10-21T06:09:22: PM2 log: App [sora-feed-app:0] exited with code [0] via signal [SIGINT]
2025-10-21T06:09:22: PM2 log: pid=639300 msg=process killed
2025-10-21T06:09:22: PM2 log: Stopping app:sora-feed-scanner id:1
2025-10-21T06:09:22: PM2 log: App name:sora-feed-scanner id:1 disconnected
2025-10-21T06:09:22: PM2 log: App [sora-feed-scanner:1] exited with code [0] via signal [SIGINT]
2025-10-21T06:09:22: PM2 log: pid=639349 msg=process killed
2025-10-21T06:12:56: PM2 log: App [sora-feed-app:0] starting in -cluster mode-
2025-10-21T06:12:56: PM2 log: App [sora-feed-scanner:1] starting in -cluster mode-
2025-10-21T06:12:56: PM2 log: App [sora-feed-app:0] online
2025-10-21T06:12:56: PM2 log: App [sora-feed-scanner:1] online
   ▲ Next.js 15.5.6
   - Local:        http://localhost:3000
   - Network:      http://192.168.50.252:3000

 ✓ Starting...
 ✓ Ready in 375ms
🔍 Fetching latest posts from database: { limit: 20, offset: 0 }
✅ Found 20 latest posts from database
🔍 Fetching Sora remix feed for post: s_68f724177f0881918b34ac86b1b715f9 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724177f0881918b34ac86b1b715f9/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72416b81c8191b7a44d58e60f5ae3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72416b81c8191b7a44d58e60f5ae3/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f724177f0881918b34ac86b1b715f9 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724177f0881918b34ac86b1b715f9/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b721fa910cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:07 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '119',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=GJ8VF40tioPuRUXvM.9a8G_054P.rrOSUaUUD7K8Wks-1761027187675-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '122',
  'x-oai-request-id': 'req_e072008de4f9a680487993bad8c0fac5',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ba4ee536-728c-4d8a-b96c-f73425e704a4',
  'x-sora-request-id': 'req_e072008de4f9a680487993bad8c0fac5'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724177f0881918b34ac86b1b715f9
🔍 Fetching Sora remix feed for post: s_68f724158bf88191ade43b42be3a074c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724158bf88191ade43b42be3a074c/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b724abe253f-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:07 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '146',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=bsZmN._.cipoenKBQCtNtHxUO.RTsmbTw.4pfIm.M5U-1761027187734-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '150',
  'x-oai-request-id': 'req_13e9d0cbc1e43a4a2c1c98860bf56456',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd3d67b32-be05-4e6d-a409-8cffc52c6017',
  'x-sora-request-id': 'req_13e9d0cbc1e43a4a2c1c98860bf56456'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724177f0881918b34ac86b1b715f9
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b720acd0ea2-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:07 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '341',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=j6vuTQvq.Z7lVdpr2FacXnW9Rvav3saz6Thaba1Boro-1761027187959-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '418',
  'x-oai-request-id': 'req_a5d4db2697d78876bfb38003deeed12f',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'dbb4f172-4352-4998-8efd-71ffbe2366cb',
  'x-sora-request-id': 'req_a5d4db2697d78876bfb38003deeed12f'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72416b81c8191b7a44d58e60f5ae3
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b73584410cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:08 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '308',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=MNB5_rCSbcf3F0qppVfcOtpb7AnzX_FrcY_8JpM7WJU-1761027188102-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '328',
  'x-oai-request-id': 'req_7e1d8e8007b1845573f6cba7da8075df',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '91ea4ae0-add3-42b6-a16b-c495827a09b8',
  'x-sora-request-id': 'req_7e1d8e8007b1845573f6cba7da8075df'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724158bf88191ade43b42be3a074c
🔍 Fetching Sora remix feed for post: s_68f72414f7b881918f2fc7804a63a9c7 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72414f7b881918f2fc7804a63a9c7/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72414d1dc8191838c487bbbb67e9d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72414d1dc8191838c487bbbb67e9d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b77dac00ea2-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:08 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '127',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=w_ZNvzRc.J7d70Duq78cb18V0Nmyc2_COUpA1ZAhfpo-1761027188602-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '132',
  'x-oai-request-id': 'req_afc4f501b144fd0e6ac062af605238df',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'ad4e32e3-97a2-4e74-84f7-57e2956153fb',
  'x-sora-request-id': 'req_afc4f501b144fd0e6ac062af605238df'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72414d1dc8191838c487bbbb67e9d
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b77db0d10cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:08 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '124',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=3bESESg3PLWtkbUH_Nbx5Dz6p2ZGJDWOSITdRgQrjyY-1761027188603-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '128',
  'x-oai-request-id': 'req_e4a0f5e29f706031b7ac36ec24673ebc',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5f102a0a-475b-4762-9359-82dcef565a27',
  'x-sora-request-id': 'req_e4a0f5e29f706031b7ac36ec24673ebc'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72414f7b881918f2fc7804a63a9c7
🔍 Fetching Sora remix feed for post: s_68f72414a6ec8191b02858fab82226b0 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72414a6ec8191b02858fab82226b0/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f7241493f88191b0879ae48e19c5fc with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7241493f88191b0879ae48e19c5fc/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b792c7e0ea2-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:08 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '141',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=iZCiyHoCBkXtVAxBke7jkzyKM7ZD8RdkaCmR7cUmKeQ-1761027188818-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '145',
  'x-oai-request-id': 'req_4b1a52498f2a9ca0b158fad16f7f9208',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7c637a7a-9223-4d6d-95a9-14658ccee706',
  'x-sora-request-id': 'req_4b1a52498f2a9ca0b158fad16f7f9208'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7241493f88191b0879ae48e19c5fc
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b791bc410cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:08 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '125',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=iZCiyHoCBkXtVAxBke7jkzyKM7ZD8RdkaCmR7cUmKeQ-1761027188818-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '134',
  'x-oai-request-id': 'req_6a8c25a9c3eb713681b1da0b8d585328',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '78bc4f79-dc4f-467b-b5b3-686a15af8077',
  'x-sora-request-id': 'req_6a8c25a9c3eb713681b1da0b8d585328'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72414a6ec8191b02858fab82226b0
🔍 Fetching Sora remix feed for post: s_68f724148f18819190c60a925cb5b44f with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724148f18819190c60a925cb5b44f/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f724147cb88191a94a9b92486755e3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724147cb88191a94a9b92486755e3/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b7a6e400ea2-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:09 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '120',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=b8GIGJJ_JYo5_WBsEQf03HYrPjHLwWjoQJKDi6K17Fc-1761027189001-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '123',
  'x-oai-request-id': 'req_544e333b763952f633395d13c5b87a52',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'a631a0a6-dfa3-4dc7-b138-77d17195b86c',
  'x-sora-request-id': 'req_544e333b763952f633395d13c5b87a52'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724147cb88191a94a9b92486755e3
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b7a6cea10cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:09 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '147',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=JAuMpNr6ZwrutPqLPdtRi3wcHk3N649MyrWTvfp4Ht8-1761027189037-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '154',
  'x-oai-request-id': 'req_9e0603d9abf20ba873c40303c626d0f4',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '33fdbb49-f7ed-476e-8143-0fb42271c94e',
  'x-sora-request-id': 'req_9e0603d9abf20ba873c40303c626d0f4'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724148f18819190c60a925cb5b44f
🔍 Fetching Sora remix feed for post: s_68f7241473508191a3d274362f2e8568 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7241473508191a3d274362f2e8568/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b7bad9210cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:09 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '121',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=jk7GgA.Z8z.UU9eaDTCuf4ChSSXFV69GHl4LQz8qOVc-1761027189216-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '134',
  'x-oai-request-id': 'req_646437aedafa499068e33215ebeeb36c',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5b7de143-3170-4546-8b78-c7921b84f2b2',
  'x-sora-request-id': 'req_646437aedafa499068e33215ebeeb36c'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7241473508191a3d274362f2e8568
🔍 Fetching Sora remix feed for post: s_68f7241449d08191ab3be8d2ff87c443 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7241449d08191ab3be8d2ff87c443/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72414400481918305d88166c7b939 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72414400481918305d88166c7b939/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b7ecf0d10cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:09 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '128',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=rS5JI5T_cJNiHo7wpBu87Kfq.ZwszJBMVi43OJz1GzQ-1761027189719-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '131',
  'x-oai-request-id': 'req_a61c13b5131ad0ddd18497903a83f464',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '26e98548-8e9f-459a-b702-a4e6b6fd1000',
  'x-sora-request-id': 'req_a61c13b5131ad0ddd18497903a83f464'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7241449d08191ab3be8d2ff87c443
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b7eec9f0ea2-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:09 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '165',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Z3eo1_6ZHwe5pHCg3hsCdOkNEdg1FMi9G8kdjRAOnnQ-1761027189773-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '168',
  'x-oai-request-id': 'req_61d4fa641b5889e2cdff782140c84692',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '0adbc399-f7f2-4a36-b53f-b0471ee1d924',
  'x-sora-request-id': 'req_61d4fa641b5889e2cdff782140c84692'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72414400481918305d88166c7b939
🔍 Fetching Sora remix feed for post: s_68f72413cc0881919bdc84e079e088ae with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72413cc0881919bdc84e079e088ae/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f72413a78081918dbfb7656253a254 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72413a78081918dbfb7656253a254/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b804fc210cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:09 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '157',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Zk14qozjF7l31FDZpHTIvpD9DgtblsVRmFnMQpvqTiE-1761027189979-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '161',
  'x-oai-request-id': 'req_d88c9061f04d93f40efd0a0d5ce155b9',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '2aabb8ba-5f64-4ee5-adf6-fec91a64a9db',
  'x-sora-request-id': 'req_d88c9061f04d93f40efd0a0d5ce155b9'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72413cc0881919bdc84e079e088ae
🔍 Fetching Sora remix feed for post: s_68f7241398b08191be69cb2fc33a15dc with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7241398b08191be69cb2fc33a15dc/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b81a86910cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '130',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=SjDAtSoXyaNW14SK.qivCXPILDotebT7eTfMCNO7pzM-1761027190178-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_b488aacfb269ab456d1cfeb8392153e0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '2363381d-22e9-4803-927a-8d11d95bf78a',
  'x-sora-request-id': 'req_b488aacfb269ab456d1cfeb8392153e0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7241398b08191be69cb2fc33a15dc
🔍 Fetching Sora remix feed for post: s_68f724137efc8191b14155e95e89710c with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724137efc8191b14155e95e89710c/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b80ef7b0ea2-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '472',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=GtLXPhm2dOUdqVuechn_ACwvZ_iYwUQ8ZzBxgVvCjts-1761027190409-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '483',
  'x-oai-request-id': 'req_cf4bc12e8500474dabf01eff4541c83a',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd8131cec-8e5d-486c-ab16-1026b60560f6',
  'x-sora-request-id': 'req_cf4bc12e8500474dabf01eff4541c83a'
}
✅ Successfully fetched remix feed with 7 video remixes
💾 Cached remix feed for post: s_68f72413a78081918dbfb7656253a254
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b83092310cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '162',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=7Epf6LxcMdSoXQW9snHjiRgnKF.JTpwxlywZc8il_y0-1761027190427-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '165',
  'x-oai-request-id': 'req_bd0d186b939f2de0e228afcf944ab4a5',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'f705669c-3eb3-4a7b-89be-00ca4a2a98be',
  'x-sora-request-id': 'req_bd0d186b939f2de0e228afcf944ab4a5'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724137efc8191b14155e95e89710c
🔍 Fetching Sora remix feed for post: s_68f7241345f8819183f39cc6c43e31e9 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f7241345f8819183f39cc6c43e31e9/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora feed with params: { limit: '20', cut: 'nf2_top', cursor: 'none' }
🔑 Bearer token present: true
📡 Making request to: https://sora.chatgpt.com/backend/project_y/feed?limit=20&cut=nf2_top
🔍 Fetching Sora remix feed for post: s_68f724132180819190e32310de183813 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724132180819190e32310de183813/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b8459e510cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '125',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=e2ReXfyVrGKkXZbif.mawW2.uwb1Rfrs7j32.Y_.2yE-1761027190599-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '130',
  'x-oai-request-id': 'req_983709dc953a7e921e50b78df8ed88fa',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '043344ff-103a-48c6-bfd4-0de56cfbf702',
  'x-sora-request-id': 'req_983709dc953a7e921e50b78df8ed88fa'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f7241345f8819183f39cc6c43e31e9
🔍 Fetching Sora remix feed for post: s_68f724130fac819186ecaac33e845b22 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724130fac819186ecaac33e845b22/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b84f98a253f-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '116',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=WTN6kPzXshjR4VpuPX2QU8g1gnj5xb.7Qt_06egzWHs-1761027190694-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '120',
  'x-oai-request-id': 'req_13b24e767cf123e157d97355556bbf79',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'deb7eb8b-c6f2-4d05-80fc-1f88b778edc0',
  'x-sora-request-id': 'req_13b24e767cf123e157d97355556bbf79'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724132180819190e32310de183813
🔍 Fetching Sora remix feed for post: s_68f72412ff148191a2e2ee0f052f8014 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f72412ff148191a2e2ee0f052f8014/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b85aaaa10cb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.7hgM5hDVVSeVYF2G2ibDMrJvFtxo0e3jB8Tn5aIeTk-1761027190811-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_552f84cfb820fad0a43efd0a2ea90b81',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'be76e078-ee7c-40c8-b291-2320998673a5',
  'x-sora-request-id': 'req_552f84cfb820fad0a43efd0a2ea90b81'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724130fac819186ecaac33e845b22
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b863adb253f-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:10 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '124',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Q3w4Gweg3nka6MEYGPMLAUfxyg3FFdgYnNmp3YOYsK4-1761027190949-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '178',
  'x-oai-request-id': 'req_32b6c684f0390a198da356dcf77856ea',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '3aca4c8a-b2e7-4317-8e1a-da376666d0d7',
  'x-sora-request-id': 'req_32b6c684f0390a198da356dcf77856ea'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f72412ff148191a2e2ee0f052f8014
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b847c5c0ea2-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:11 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1083',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.AJ2cQoJUclCVBCvqSQOkjtLleudnav71MOZYmPiwpw-1761027191579-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1087',
  'x-oai-request-id': 'req_df6d209103369843b606e98e501ec5ab',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5bfd0288-4bcf-4807-ab52-b31d3c925089',
  'x-sora-request-id': 'req_df6d209103369843b606e98e501ec5ab'
}
✅ Successfully fetched feed with 15 items
💾 Cached top videos feed
🔍 Fetching Sora remix feed for post: s_68f5f08a22d08191866cf9be5e3e475d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5f08a22d08191866cf9be5e3e475d/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f6d0df913881919fbd1bb6d290e733 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6d0df913881919fbd1bb6d290e733/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f5f08a22d08191866cf9be5e3e475d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5f08a22d08191866cf9be5e3e475d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b8bbdd310cb-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:12 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '791',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=EmDBAxnIHvI7zEft1qVtdBoBzf79IhqIOavZajTzha0-1761027192442-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '794',
  'x-oai-request-id': 'req_271b5948b4ec83a3a30298ee2f40f2df',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '04c82b33-a9a0-46cc-884c-ae44a0390ece',
  'x-sora-request-id': 'req_271b5948b4ec83a3a30298ee2f40f2df'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5f08a22d08191866cf9be5e3e475d
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b8bbea10ea2-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:12 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '830',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=iNMhYg3m9kd.ZJDzwzW8yj3VY3HM4PW7sLWAzfgS5l0-1761027192500-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '834',
  'x-oai-request-id': 'req_a6a1e2091256d9033f23a625934bb1b1',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'dfaaa97c-4a7e-46f3-b01c-5a40c820b76d',
  'x-sora-request-id': 'req_a6a1e2091256d9033f23a625934bb1b1'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6d0df913881919fbd1bb6d290e733
🔍 Fetching Sora remix feed for post: s_68f609ae8ba4819191d65301b0f4e1f8 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f609ae8ba4819191d65301b0f4e1f8/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f63550b780819182f9c8f392a80c54 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f63550b780819182f9c8f392a80c54/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b8bc975253f-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:12 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1132',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=o2zhIFVnX3x3QbreNe7vgBqxqci1bziqM1_KtTJS8.I-1761027192846-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1184',
  'x-oai-request-id': 'req_5d45d2899b915bad4e0406ff474f81c6',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b6210dad-b947-4294-92a7-c21f36d43187',
  'x-sora-request-id': 'req_5d45d2899b915bad4e0406ff474f81c6'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5f08a22d08191866cf9be5e3e475d
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b91995010cb-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:13 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1303',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=fh3DfhI0qsg.gxG9eklsvza1QLXDRGGs_hU2MkOdqyE-1761027193915-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1308',
  'x-oai-request-id': 'req_d03c2f24761324466669ef80cf8d3005',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '10ad37b4-3e98-4fba-9c2f-f5968576a7a1',
  'x-sora-request-id': 'req_d03c2f24761324466669ef80cf8d3005'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f609ae8ba4819191d65301b0f4e1f8
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b919ee20ea2-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:13 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1375',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=AiIDze_Mj9DCvwee0vxOKawMeThM.uHPZQ5iQrrk1w0-1761027193965-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1381',
  'x-oai-request-id': 'req_6550a360d3c74fb5a6cd21cbd405d5e3',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '8e10388b-3845-4c52-b983-29aa24d342cd',
  'x-sora-request-id': 'req_6550a360d3c74fb5a6cd21cbd405d5e3'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f63550b780819182f9c8f392a80c54
🔍 Fetching Sora remix feed for post: s_68f5f15e1d6081919028eee6c801b0c3 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5f15e1d6081919028eee6c801b0c3/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f6c5775480819189f381baa6f4cf00 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6c5775480819189f381baa6f4cf00/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b9aeed710cb-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:14 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '785',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=7CQa0ZWyFFz7DqpmJRVKCusn9blrvocUPAvO5APws8M-1761027194872-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '790',
  'x-oai-request-id': 'req_3e296410b2e02ee1a7acea4eaf074095',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7f070fc2-513e-4ce6-81e5-d1d3377fdee7',
  'x-sora-request-id': 'req_3e296410b2e02ee1a7acea4eaf074095'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5f15e1d6081919028eee6c801b0c3
🔍 Fetching Sora remix feed for post: s_68f6618756488191a85dfd620a6127fb with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6618756488191a85dfd620a6127fb/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9b9aeb7b0ea2-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:15 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '958',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=uksPooNuHJ5GtNFa2lynWgmRDVO2v7oWpZNM1gQ06wk-1761027195038-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '961',
  'x-oai-request-id': 'req_9f2d43406b013225b68f574f4dde9b39',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9a5e0c85-cccb-4a4a-9e0a-0772de2aa32c',
  'x-sora-request-id': 'req_9f2d43406b013225b68f574f4dde9b39'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6c5775480819189f381baa6f4cf00
🔍 Fetching Sora remix feed for post: s_68f6c50a2a5c8191b06c3708e3afd515 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6c50a2a5c8191b06c3708e3afd515/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ba17bc10ea2-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:16 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '898',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=rxMvmfb0xDW9EE68F8t4rONxMnD1KzV0gkhpTYUHnBc-1761027196031-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '902',
  'x-oai-request-id': 'req_36ee2be27b6cc2d53aa83c7e8f2a0524',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '0b0b4883-0c1b-463d-ae9f-d3f630447af6',
  'x-sora-request-id': 'req_36ee2be27b6cc2d53aa83c7e8f2a0524'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6c50a2a5c8191b06c3708e3afd515
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ba0ca2010cb-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:16 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1049',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=PPuBzoXD6YUiVNnp1N3njTIb4c9uS6GdyQOB5W_hK_Q-1761027196086-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1053',
  'x-oai-request-id': 'req_e8f71584075098a55a58fa82876c76e4',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'caa3fc02-c6a8-4273-9348-e62b28b74626',
  'x-sora-request-id': 'req_e8f71584075098a55a58fa82876c76e4'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6618756488191a85dfd620a6127fb
🔍 Fetching Sora remix feed for post: s_68f6d4a965408191a9f6826d9d75b0a4 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6d4a965408191a9f6826d9d75b0a4/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f6ce5a19388191b2bd24c7df230a8d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6ce5a19388191b2bd24c7df230a8d/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ba7ee1b10cb-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:17 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '830',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=80gzwHtAj2z9GLJ1rPwwFv9QYqhCv0erybDegARKL9w-1761027196999-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '834',
  'x-oai-request-id': 'req_60327e215797e22befa590d8541ddc2a',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '74f19fe7-b007-497d-aef1-322768adb50d',
  'x-sora-request-id': 'req_60327e215797e22befa590d8541ddc2a'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6d4a965408191a9f6826d9d75b0a4
🔍 Fetching Sora remix feed for post: s_68f63fb075b881919fb03ac0b56eea47 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f63fb075b881919fb03ac0b56eea47/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ba7ecbd0ea2-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:17 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1660',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Nl4ZJPRU7oQJmLDkwxhLMK17DsiIxW8iY43aQnmIJ6o-1761027197819-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1663',
  'x-oai-request-id': 'req_474101868bae3d3045bb10e403d4511f',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '4af47cb1-66e1-4f09-bc45-03a2a7ad6303',
  'x-sora-request-id': 'req_474101868bae3d3045bb10e403d4511f'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6ce5a19388191b2bd24c7df230a8d
🔍 Fetching Sora remix feed for post: s_68f63b63d43c8191a78e6a1b8ccfa982 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f63b63d43c8191a78e6a1b8ccfa982/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9bad898910cb-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:18 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1387',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=c1rxRpudKf0Ei0YkAFoFXFdznqmkO92BkmlTgSmYtE0-1761027198455-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1392',
  'x-oai-request-id': 'req_72b8b8ea0edb5939df624cd577795b14',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '01db602c-8fb6-402c-bde2-0d9d28c0deee',
  'x-sora-request-id': 'req_72b8b8ea0edb5939df624cd577795b14'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f63fb075b881919fb03ac0b56eea47
🔍 Fetching Sora remix feed for post: s_68f67c149124819182c610e1e998fd45 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f67c149124819182c610e1e998fd45/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9bb6bf5b10cb-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:18 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '248',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.PEwtHhAYdUzz5r.0trNvQLYqTo8QsbbnwXl1clOLXA-1761027198802-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '257',
  'x-oai-request-id': 'req_32b6c684f0390a198da356dcf77856ea',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd2c9ca16-ea88-4f26-8999-9523bbe29e26',
  'x-sora-request-id': 'req_32b6c684f0390a198da356dcf77856ea'
}
✅ Successfully fetched remix feed with 2 video remixes
💾 Cached remix feed for post: s_68f67c149124819182c610e1e998fd45
🔍 Fetching Sora remix feed for post: s_68f5dfeb2d288191a2efb09fa86423d8 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f5dfeb2d288191a2efb09fa86423d8/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9bb34c030ea2-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:19 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1090',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=GbMeQhralDy1iaVgF_6p2OREWKq2pRFrvWWeTXcRu1Y-1761027199083-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1093',
  'x-oai-request-id': 'req_959ce8e4cfe2fab66d87b0c6b982d196',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '5f8d8e05-8589-4099-b01a-166338218ec5',
  'x-sora-request-id': 'req_959ce8e4cfe2fab66d87b0c6b982d196'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f63b63d43c8191a78e6a1b8ccfa982
🔍 Fetching Sora remix feed for post: s_68f6360affd8819189da0186aad35e4f with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f6360affd8819189da0186aad35e4f/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9bbaedc00ea2-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '910',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=iv7MPpFro.sngx4JrxutVtlUykz27v5SIFTS3L2rTLQ-1761027200107-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '914',
  'x-oai-request-id': 'req_a2648dca01d8ab08ceefcbc4818b74aa',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '2ed7c9ed-3e1c-426c-8dc7-b5be32e17f96',
  'x-sora-request-id': 'req_a2648dca01d8ab08ceefcbc4818b74aa'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f6360affd8819189da0186aad35e4f
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9bb8c8bd10cb-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:13:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1328',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=WvyXW69yXyBDK.UX.oNY.DQC4Q1RxUf_0YRj7U4UrUc-1761027200198-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1333',
  'x-oai-request-id': 'req_ac18df1d80b0ffc7716c62f2223e7a6e',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '8bc08ee9-e67f-4c1a-bdef-7d8358fcf036',
  'x-sora-request-id': 'req_ac18df1d80b0ffc7716c62f2223e7a6e'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f5dfeb2d288191a2efb09fa86423d8
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 9,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 13,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 6,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 12,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 2,
  rows: 1
}
🔍 Fetching latest posts from database: { limit: 20, offset: 0 }
✅ Found 20 latest posts from database
🔍 Fetching Sora remix feed for post: s_68f724e925708191990b636525790fdd with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e925708191990b636525790fdd/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f724e9d0b88191b8298cac17370e2b with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e9d0b88191b8298cac17370e2b/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f724e9d0b88191b8298cac17370e2b with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e9d0b88191b8298cac17370e2b/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eabdfb610a1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:19 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '144',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=_ZOHsjBZymraM3a2RnhO765ncY0Qn59Cd2sFvhWxapY-1761027319818-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '148',
  'x-oai-request-id': 'req_be42a39b28a97a618aa215efa42c3f6a',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '422cfda0-6334-409d-b870-7e0746ec38ac',
  'x-sora-request-id': 'req_be42a39b28a97a618aa215efa42c3f6a'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e9d0b88191b8298cac17370e2b
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eabd87ce8fb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:19 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '133',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=P4wMt6dx1Yma.Cy4Nqu3mNeq20UCB82xL0Dnd_8mXfY-1761027319826-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '159',
  'x-oai-request-id': 'req_6dfa5bfaa463d319215b18d3fca4b4f6',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'b16e6710-caea-414f-8f14-7d4e0d6a58e3',
  'x-sora-request-id': 'req_6dfa5bfaa463d319215b18d3fca4b4f6'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e925708191990b636525790fdd
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eac2f90ead0-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:19 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '138',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=9ewU6nOyVbHOJluHzibDK0PJt06xhqjDPTnq3IhSXRs-1761027319863-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '141',
  'x-oai-request-id': 'req_09fd6103b109e3c717a91567f41816eb',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '1a9143ca-0d4a-4b81-a4c5-362cb6e960fe',
  'x-sora-request-id': 'req_09fd6103b109e3c717a91567f41816eb'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e9d0b88191b8298cac17370e2b
🔍 Fetching Sora remix feed for post: s_68f724e904a88191955eeeed1494ff27 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e904a88191955eeeed1494ff27/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f724e836d88191be2d177d64083dee with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e836d88191be2d177d64083dee/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eaddc02e8fb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '122',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=v.GAiIlG3hfw3W65j6MzMPZRp1GHkHMDRC9QQ3fRlLI-1761027320115-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '125',
  'x-oai-request-id': 'req_fa07514dc342d6996f46f8c9192b7144',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9ce99db5-b00c-4b11-857a-967ef9935db9',
  'x-sora-request-id': 'req_fa07514dc342d6996f46f8c9192b7144'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e904a88191955eeeed1494ff27
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eadd91f10a1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=cuT2XZaFZyWKR.8gGcHny1NgGdG6kzODxyo0odN79H4-1761027320131-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '138',
  'x-oai-request-id': 'req_ad0d696a897be1c0399f73df575e439b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '8956e0c4-5bf5-4e0b-835f-0948de5347d6',
  'x-sora-request-id': 'req_ad0d696a897be1c0399f73df575e439b'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e836d88191be2d177d64083dee
🔍 Fetching Sora remix feed for post: s_68f724e7437c819194dc5ff05ae182ea with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e7437c819194dc5ff05ae182ea/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f724e72ecc8191993a83550580e3fb with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e72ecc8191993a83550580e3fb/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eaf3e72e8fb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '131',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=.eYXhNH90TKkQ6iSgryWcFJSJpV9vK0eyWE_q4IciTU-1761027320344-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '135',
  'x-oai-request-id': 'req_39bf167dd75a06dfbb8a9aebcb6abc03',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '6ad58947-d816-4d8c-a436-8891732920a2',
  'x-sora-request-id': 'req_39bf167dd75a06dfbb8a9aebcb6abc03'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e7437c819194dc5ff05ae182ea
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eafda6410a1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '146',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=VupPlYPlMYGGGVJzVCxZ1difIkhVqJtbuTT3n7L9K7A-1761027320461-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '150',
  'x-oai-request-id': 'req_8de407e4454755f8c82dd1bd90d2e5b9',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '80804465-8ef9-49f0-a6fa-02ad367b9532',
  'x-sora-request-id': 'req_8de407e4454755f8c82dd1bd90d2e5b9'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e72ecc8191993a83550580e3fb
🔍 Fetching Sora remix feed for post: s_68f724e6eecc81919ff5c661a2301758 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e6eecc81919ff5c661a2301758/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f724e6d5e081918d750b5c471f6e09 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e6d5e081918d750b5c471f6e09/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eb129d6e8fb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=WeVkP5v4sE9meKu20OXRh3AfCOM9Hf5YZlEqXJzZ4V8-1761027320655-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '133',
  'x-oai-request-id': 'req_21c818e4e20da4a8c47e8fb4836f5aa5',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7d05e91d-78df-468d-9647-56fdc1198931',
  'x-sora-request-id': 'req_21c818e4e20da4a8c47e8fb4836f5aa5'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e6eecc81919ff5c661a2301758
🔍 Fetching Sora remix feed for post: s_68f724e68ff88191a8a3540edf3a99b2 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e68ff88191a8a3540edf3a99b2/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eb1db9110a1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '170',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=bOtMEkfDKiYxx.eUfquV73y2_un.nUUKQwc9U2Vrh3U-1761027320811-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '174',
  'x-oai-request-id': 'req_ba041d4c00da6def35dd13183601f440',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'd4623b8e-89c6-430c-a3d0-aec573f650e7',
  'x-sora-request-id': 'req_ba041d4c00da6def35dd13183601f440'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e6d5e081918d750b5c471f6e09
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eb28c2fe8fb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:20 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '118',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=EgnSXQGorQaoycAqqgiGNpvs3_l3yoRi6NpctG62Zrw-1761027320856-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '121',
  'x-oai-request-id': 'req_ef21e19e42f7ba4ebf0b0d021b0933b8',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7a834178-a09c-4169-a3bb-b9105db2b5cd',
  'x-sora-request-id': 'req_ef21e19e42f7ba4ebf0b0d021b0933b8'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e68ff88191a8a3540edf3a99b2
🔍 Fetching Sora remix feed for post: s_68f724e63d608191a1192a15dd889d2e with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e63d608191a1192a15dd889d2e/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f724e63b948191ae770afc6585b604 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e63b948191ae770afc6585b604/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eb3ecd610a1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:21 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '153',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=czu3R9G4JrQ_RFt3fpPtQIBfKtyR.ko6ulgwfw38EZw-1761027321116-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '156',
  'x-oai-request-id': 'req_d065c27ce3a077ed654e5e67ba097fe0',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'c2839e1f-b55e-49a3-9f3a-92fe2ba1d634',
  'x-sora-request-id': 'req_d065c27ce3a077ed654e5e67ba097fe0'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e63b948191ae770afc6585b604
🔍 Fetching Sora remix feed for post: s_68f724e62138819184b27cfd1d93093b with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e62138819184b27cfd1d93093b/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eb5bdc110a1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:21 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '202',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=p7w9H_4lA34IuMxenHTgRluy7KLXW8foOsvExVs6_2E-1761027321475-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '211',
  'x-oai-request-id': 'req_dd86ec302ad68956595704b2085155d4',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'a1c2552f-220a-491e-88c1-dff006e7ec40',
  'x-sora-request-id': 'req_dd86ec302ad68956595704b2085155d4'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e62138819184b27cfd1d93093b
🔍 Fetching Sora remix feed for post: s_68f724e60e708191a02770d98c250dc7 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e60e708191a02770d98c250dc7/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eb7cecc10a1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:21 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '146',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=ro4KE6vLYVUQA7EkuOMgyCfGu_MUag5t6vLGxZKVu.U-1761027321732-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '149',
  'x-oai-request-id': 'req_6a8bbe42f9114db3b72876dbd58f740c',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '6188a73a-9f64-42b5-b561-1354cbdd184c',
  'x-sora-request-id': 'req_6a8bbe42f9114db3b72876dbd58f740c'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e60e708191a02770d98c250dc7
🔍 Fetching Sora remix feed for post: s_68f724e60a848191b4e698b961520677 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e60a848191b4e698b961520677/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eb3eeb2e8fb-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:22 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '1044',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=4BUVO0kdyMQGanxoL0ZFisNZME.qBTJnw_qjcD1pZds-1761027322010-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '1048',
  'x-oai-request-id': 'req_33a8797bf2b086ba5f55c5f84e86a835',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9176ce2a-60e3-41b8-851d-ef6e62a14f5c',
  'x-sora-request-id': 'req_33a8797bf2b086ba5f55c5f84e86a835'
}
✅ Successfully fetched remix feed with 20 video remixes
💾 Cached remix feed for post: s_68f724e63d608191a1192a15dd889d2e
🔍 Fetching Sora remix feed for post: s_68f724e5edc48191b77e48e38e1261c5 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e5edc48191b77e48e38e1261c5/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9eb9881a10a1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:22 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '112',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=Q9mrnaKv5.3.FHkLNNTdp3aPcHCgJh3d7ZxlL9kOZXA-1761027322317-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '448',
  'x-oai-request-id': 'req_eb202cbf44626b2183b40c97483ff207',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'a085d277-528f-4673-8d0b-439efa9fdc8b',
  'x-sora-request-id': 'req_eb202cbf44626b2183b40c97483ff207'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e60a848191b4e698b961520677
🔍 Fetching Sora remix feed for post: s_68f724e5edc48191b8425eafc041e316 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e5edc48191b8425eafc041e316/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ebbed5ce8fb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:22 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '150',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=dDOXnOCeLvpdj19.Ev.5oTCjOrXVRRCcdmQ6P92hAMk-1761027322390-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '153',
  'x-oai-request-id': 'req_1a92d983e619a9ca50d6c02ef51d8aeb',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '9a12e0d6-2759-4ea5-a9c4-b5dd59e3de5d',
  'x-sora-request-id': 'req_1a92d983e619a9ca50d6c02ef51d8aeb'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e5edc48191b77e48e38e1261c5
🔍 Fetching Sora remix feed for post: s_68f724e5bcf08191bdf1192899d4b637 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e5bcf08191bdf1192899d4b637/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ebcf98b10a1-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:22 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '112',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=MQ75Ivq6P4DYBkPtlLHqczLs3PsB8p_I7biLoWHqjpQ-1761027322548-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '119',
  'x-oai-request-id': 'req_ba041d4c00da6def35dd13183601f440',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '941e6753-2601-4dee-9d87-2f7ffa44b137',
  'x-sora-request-id': 'req_ba041d4c00da6def35dd13183601f440'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e5edc48191b8425eafc041e316
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ebda8a0e8fb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:22 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '139',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=7wYUIvUYFqubrM9K6fyr0RUTeSO_6uJLcqs1tLLErwE-1761027322668-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '142',
  'x-oai-request-id': 'req_7bde4c230300c74a9e091fc8984f2732',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': 'e11d363c-8215-4838-8134-a5df19a402a1',
  'x-sora-request-id': 'req_7bde4c230300c74a9e091fc8984f2732'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e5bcf08191bdf1192899d4b637
🔍 Fetching Sora remix feed for post: s_68f724e5b6748191a6773a621ed9913d with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e5b6748191a6773a621ed9913d/remix_feed?limit=20
🔑 Bearer token present: true
🔍 Fetching Sora remix feed for post: s_68f724e5ad5881919cce337872b73708 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e5ad5881919cce337872b73708/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ebeeabbe8fb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:22 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '121',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=LERVUTODCjV1wjykpaMnFAaRqBQiODdHyQ9rFSEfPXo-1761027322840-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '125',
  'x-oai-request-id': 'req_4afe71d6ade30140fbab0c8c8db533db',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '67c4ea76-ef99-4e6c-ba83-e17e1ec21ef9',
  'x-sora-request-id': 'req_4afe71d6ade30140fbab0c8c8db533db'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e5b6748191a6773a621ed9913d
🔍 Fetching Sora remix feed for post: s_68f724e586cc81919ada448aab9667b7 with params: { limit: '20', cursor: 'none' }
📡 Making request to: https://sora.chatgpt.com/backend/project_y/post/s_68f724e586cc81919ada448aab9667b7/remix_feed?limit=20
🔑 Bearer token present: true
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ec02cebe8fb-ORD',
  connection: 'keep-alive',
  'content-length': '35',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:23 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '129',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=c4ea2ZkIe6uzzCjXJBvxwfU_I01UBfmrfria2CX6joY-1761027323045-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '132',
  'x-oai-request-id': 'req_466f7456425539001283df5f04bc6b5b',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '7671d518-e1af-49df-91a4-a99cdc43572a',
  'x-sora-request-id': 'req_466f7456425539001283df5f04bc6b5b'
}
✅ Successfully fetched remix feed with 0 video remixes
💾 Cached remix feed for post: s_68f724e586cc81919ada448aab9667b7
📊 Response status: 200
📊 Response headers: {
  'cf-cache-status': 'DYNAMIC',
  'cf-ray': '991e9ebeea8d10a1-ORD',
  connection: 'keep-alive',
  'content-encoding': 'gzip',
  'content-type': 'application/json',
  date: 'Tue, 21 Oct 2025 06:15:23 GMT',
  'openai-organization': 'user-d4efg53jpiezzezlouxtvhmi',
  'openai-processing-ms': '403',
  'openai-version': '2020-10-01',
  server: 'cloudflare',
  'set-cookie': '_cfuvid=fp.hBm3FFw.kh4aUqJpqjXJcuLH5pzaf14OU9b6qveo-1761027323128-0.0.1.1-604800000; path=/; domain=.sora.chatgpt.com; HttpOnly; Secure; SameSite=None',
  'strict-transport-security': 'max-age=31536000; includeSubDomains; preload',
  'transfer-encoding': 'chunked',
  'x-content-type-options': 'nosniff',
  'x-envoy-upstream-service-time': '407',
  'x-oai-request-id': 'req_80a804c97196ae4914e94f146ef6887d',
  'x-openai-proxy-wasm': 'v0.1',
  'x-request-id': '19305225-a899-4522-8296-85b5fd82e94e',
  'x-sora-request-id': 'req_80a804c97196ae4914e94f146ef6887d'
}
✅ Successfully fetched remix feed with 9 video remixes
💾 Cached remix feed for post: s_68f724e5ad5881919cce337872b73708
Executed query {
  text: 'SELECT * FROM scanner_stats ORDER BY id DESC LIMIT 1',
  duration: 7,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM sora_posts',
  duration: 8,
  rows: 1
}
Executed query {
  text: 'SELECT COUNT(*) as total FROM creators',
  duration: 5,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT id, text, posted_at, indexed_at, permalink\n' +
    '      FROM sora_posts\n' +
    '      ORDER BY indexed_at DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 0,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(indexed_at) as date,\n' +
    '        COUNT(*) as post_count\n' +
    '      FROM sora_posts\n' +
    "      WHERE indexed_at > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(indexed_at)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 11,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        DATE(c.first_seen) as date,\n' +
    '        COUNT(DISTINCT c.id) as creator_count\n' +
    '      FROM creators c\n' +
    "      WHERE c.first_seen > CURRENT_TIMESTAMP - INTERVAL '7 days'\n" +
    '      GROUP BY DATE(c.first_seen)\n' +
    '      ORDER BY date DESC\n' +
    '    ',
  duration: 94,
  rows: 2
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        pg_size_pretty(pg_database_size(current_database())) as database_size,\n' +
    '        pg_database_size(current_database()) as database_size_bytes\n' +
    '    ',
  duration: 1,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        t.schemaname,\n' +
    '        t.tablename,\n' +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as size,\n" +
    "        pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) as size_bytes,\n" +
    "        pg_size_pretty(pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as table_size,\n" +
    "        pg_size_pretty(pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) - pg_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename))) as index_size\n" +
    '      FROM pg_tables t\n' +
    "      WHERE t.schemaname = 'public'\n" +
    "      ORDER BY pg_total_relation_size(quote_ident(t.schemaname)||'.'||quote_ident(t.tablename)) DESC\n" +
    '    ',
  duration: 2,
  rows: 4
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        numbackends as active_connections,\n' +
    '        xact_commit as transactions_committed,\n' +
    '        xact_rollback as transactions_rolled_back,\n' +
    '        blks_read as disk_blocks_read,\n' +
    '        blks_hit as buffer_hits,\n' +
    '        tup_returned as tuples_returned,\n' +
    '        tup_fetched as tuples_fetched,\n' +
    '        tup_inserted as tuples_inserted,\n' +
    '        tup_updated as tuples_updated,\n' +
    '        tup_deleted as tuples_deleted,\n' +
    '        ROUND(((blks_hit::float / NULLIF(blks_hit + blks_read, 0)) * 100)::numeric, 2) as cache_hit_ratio\n' +
    '      FROM pg_stat_database \n' +
    '      WHERE datname = current_database()\n' +
    '    ',
  duration: 0,
  rows: 1
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        i.schemaname,\n' +
    '        i.relname as tablename,\n' +
    '        i.indexrelname as indexname,\n' +
    '        i.idx_tup_read as index_tuples_read,\n' +
    '        i.idx_tup_fetch as index_tuples_fetched\n' +
    '      FROM pg_stat_user_indexes i\n' +
    "      WHERE i.schemaname = 'public'\n" +
    '      ORDER BY i.idx_tup_read DESC\n' +
    '      LIMIT 10\n' +
    '    ',
  duration: 1,
  rows: 10
}
Executed query {
  text: '\n' +
    '      SELECT \n' +
    '        setting as max_connections,\n' +
    "        (SELECT setting FROM pg_settings WHERE name = 'shared_buffers') as shared_buffers,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'effective_cache_size') as effective_cache_size,\n" +
    "        (SELECT setting FROM pg_settings WHERE name = 'work_mem') as work_mem\n" +
    '      FROM pg_settings \n' +
    "      WHERE name = 'max_connections'\n" +
    '    ',
  duration: 3,
  rows: 1
}
